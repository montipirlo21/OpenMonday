// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public static partial class MondayClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::OpenMonday.Core.strawberryShake.State.MondayClientStoreAccessor> AddMondayClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::OpenMonday.Core.strawberryShake.State.MondayClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetActivityLogQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursorQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_NextPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardsStructureByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetTeamsByIdsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetTeamsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.UpdateBoardAttributeMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.UpdateChangeSimpleColumnValueMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.MondayClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IMondayClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::OpenMonday.Core.strawberryShake.State.MondayClientStoreAccessor>("MondayClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MondayClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OpenMonday.Core.strawberryShake.ColumnTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OpenMonday.Core.strawberryShake.KindSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OpenMonday.Core.strawberryShake.BoardAttributesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.JsonSerializer("JSON"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ISO8601DateTime"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>, global::OpenMonday.Core.strawberryShake.State.GetActivityLogResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>, global::OpenMonday.Core.strawberryShake.State.GetActivityLogBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetActivityLogQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetActivityLogQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardItemsByCursorResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardItemsByCursorBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursorQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursorQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardItemsByCursor_NextPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardItemsByCursor_NextPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_NextPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_NextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardsStructureByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>, global::OpenMonday.Core.strawberryShake.State.GetBoardsStructureByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetBoardsStructureByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetBoardsStructureByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>, global::OpenMonday.Core.strawberryShake.State.GetTeamsByIdsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>, global::OpenMonday.Core.strawberryShake.State.GetTeamsByIdsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetTeamsByIdsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetTeamsByIdsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsResult>, global::OpenMonday.Core.strawberryShake.State.GetTeamsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetTeamsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsResult>, global::OpenMonday.Core.strawberryShake.State.GetTeamsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetTeamsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetTeamsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetTeamsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetTeamsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetTeamsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetUsersResult>, global::OpenMonday.Core.strawberryShake.State.GetUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IGetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetUsersResult>, global::OpenMonday.Core.strawberryShake.State.GetUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IGetUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IGetUsersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.GetUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IGetUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.GetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>, global::OpenMonday.Core.strawberryShake.State.UpdateBoardAttributeResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>, global::OpenMonday.Core.strawberryShake.State.UpdateBoardAttributeBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.UpdateBoardAttributeMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.UpdateBoardAttributeMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>, global::OpenMonday.Core.strawberryShake.State.UpdateChangeSimpleColumnValueResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>, global::OpenMonday.Core.strawberryShake.State.UpdateChangeSimpleColumnValueBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.UpdateChangeSimpleColumnValueMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.UpdateChangeSimpleColumnValueMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::OpenMonday.Core.strawberryShake.State.MondayClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.MondayClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenMonday.Core.strawberryShake.IMondayClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenMonday.Core.strawberryShake.MondayClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace OpenMonday.Core.strawberryShake
{
    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogResult : global::System.IEquatable<GetActivityLogResult>, IGetActivityLogResult
    {
        public GetActivityLogResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards?>? boards)
        {
            Boards = boards;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards?>? Boards { get; }

        public virtual global::System.Boolean Equals(GetActivityLogResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Boards, other.Boards));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetActivityLogResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boards != null)
                {
                    foreach (var Boards_elm in Boards)
                    {
                        if (Boards_elm != null)
                        {
                            hash ^= 397 * Boards_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLog_Boards_Board : global::System.IEquatable<GetActivityLog_Boards_Board>, IGetActivityLog_Boards_Board
    {
        public GetActivityLog_Boards_Board(global::System.String? updated_At, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs?>? activity_Logs)
        {
            Updated_at = updated_At;
            Activity_logs = activity_Logs;
        }

        /// <summary>
        /// The last time the board was updated at.
        /// </summary>
        public global::System.String? Updated_at { get; }
        /// <summary>
        /// The board log events.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs?>? Activity_logs { get; }

        public virtual global::System.Boolean Equals(GetActivityLog_Boards_Board? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at))) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Activity_logs, other.Activity_logs);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetActivityLog_Boards_Board)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Activity_logs != null)
                {
                    foreach (var Activity_logs_elm in Activity_logs)
                    {
                        if (Activity_logs_elm != null)
                        {
                            hash ^= 397 * Activity_logs_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An activity log event
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLog_Boards_Activity_logs_ActivityLogType : global::System.IEquatable<GetActivityLog_Boards_Activity_logs_ActivityLogType>, IGetActivityLog_Boards_Activity_logs_ActivityLogType
    {
        public GetActivityLog_Boards_Activity_logs_ActivityLogType(global::System.String id, global::System.String user_Id, global::System.String @event, global::System.String created_At)
        {
            Id = id;
            User_id = user_Id;
            Event = @event;
            Created_at = created_At;
        }

        public global::System.String Id { get; }
        public global::System.String User_id { get; }
        public global::System.String Event { get; }
        public global::System.String Created_at { get; }

        public virtual global::System.Boolean Equals(GetActivityLog_Boards_Activity_logs_ActivityLogType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && User_id.Equals(other.User_id) && Event.Equals(other.Event) && Created_at.Equals(other.Created_at);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetActivityLog_Boards_Activity_logs_ActivityLogType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * User_id.GetHashCode();
                hash ^= 397 * Event.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLogResult
    {
        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards?>? Boards { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLog_Boards
    {
        /// <summary>
        /// The last time the board was updated at.
        /// </summary>
        public global::System.String? Updated_at { get; }
        /// <summary>
        /// The board log events.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs?>? Activity_logs { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLog_Boards_Board : IGetActivityLog_Boards
    {
    }

    /// <summary>
    /// An activity log event
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLog_Boards_Activity_logs
    {
        public global::System.String Id { get; }
        public global::System.String User_id { get; }
        public global::System.String Event { get; }
        public global::System.String Created_at { get; }
    }

    /// <summary>
    /// An activity log event
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLog_Boards_Activity_logs_ActivityLogType : IGetActivityLog_Boards_Activity_logs
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorResult : global::System.IEquatable<GetBoardItemsByCursorResult>, IGetBoardItemsByCursorResult
    {
        public GetBoardItemsByCursorResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards?>? boards)
        {
            Boards = boards;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards?>? Boards { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursorResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Boards, other.Boards));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursorResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boards != null)
                {
                    foreach (var Boards_elm in Boards)
                    {
                        if (Boards_elm != null)
                        {
                            hash ^= 397 * Boards_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Board : global::System.IEquatable<GetBoardItemsByCursor_Boards_Board>, IGetBoardItemsByCursor_Boards_Board
    {
        public GetBoardItemsByCursor_Boards_Board(global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page items_Page)
        {
            Items_page = items_Page;
        }

        /// <summary>
        /// The board's items (rows).
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page Items_page { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Board? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Items_page.Equals(other.Items_page));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Board)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Items_page.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_ItemsResponse : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_ItemsResponse>, IGetBoardItemsByCursor_Boards_Items_page_ItemsResponse
    {
        public GetBoardItemsByCursor_Boards_Items_page_ItemsResponse(global::System.String? cursor, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items> items)
        {
            Cursor = cursor;
            Items = items;
        }

        /// <summary>
        /// An opaque cursor that represents the position in the list after the last
        /// returned item. Use this cursor for pagination to fetch the next set of items.
        /// If the cursor is null, there are no more items to fetch.
        /// </summary>
        public global::System.String? Cursor { get; }
        /// <summary>
        /// The items associated with the cursor.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items> Items { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_ItemsResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Cursor is null && other.Cursor is null) || Cursor != null && Cursor.Equals(other.Cursor))) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_ItemsResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Cursor != null)
                {
                    hash ^= 397 * Cursor.GetHashCode();
                }

                foreach (var Items_elm in Items)
                {
                    hash ^= 397 * Items_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Item : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Item>, IGetBoardItemsByCursor_Boards_Items_page_Items_Item
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Item(global::System.String id, global::System.String name, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? @group, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> column_Values)
        {
            Id = id;
            Name = name;
            Group = @group;
            Column_values = column_Values;
        }

        /// <summary>
        /// The item's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The item's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The group that contains this item.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? Group { get; }
        /// <summary>
        /// The item's column values.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> Column_values { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Item? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && ((Group is null && other.Group is null) || Group != null && Group.Equals(other.Group)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Column_values, other.Column_values);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Item)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Group != null)
                {
                    hash ^= 397 * Group.GetHashCode();
                }

                foreach (var Column_values_elm in Column_values)
                {
                    hash ^= 397 * Column_values_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group>, IGetBoardItemsByCursor_Boards_Items_page_Items_Group_Group
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group(global::System.String id)
        {
            Id = id;
        }

        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The formatted date and time in user time zone.
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.String display_Value)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Display_value = display_Value;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// A string representing all the formula values, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && Display_value.Equals(other.Display_value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Display_value.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.String display_Value)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Display_value = display_Value;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// A string representing all the names of the linked items, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && Display_value.Equals(other.Display_value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Display_value.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.DateTime? updated_At, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? persons_And_Teams)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Updated_at = updated_At;
            Persons_and_teams = persons_And_Teams;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The people and teams assigned to the item.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? Persons_and_teams { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Persons_and_teams, other.Persons_and_teams);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Persons_and_teams != null)
                {
                    foreach (var Persons_and_teams_elm in Persons_and_teams)
                    {
                        hash ^= 397 * Persons_and_teams_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.Int32? index, global::System.Boolean? is_Done, global::System.String? update_Id, global::System.DateTime? updated_At)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Index = index;
            Is_done = is_Done;
            Update_id = update_Id;
            Updated_at = updated_At;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The index of the status in the board
        /// </summary>
        public global::System.Int32? Index { get; }
        /// <summary>
        /// Whether the status is done
        /// </summary>
        public global::System.Boolean? Is_done { get; }
        /// <summary>
        /// The ID of an update attached to the status
        /// </summary>
        public global::System.String? Update_id { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && global::System.Object.Equals(Index, other.Index) && global::System.Object.Equals(Is_done, other.Is_done) && ((Update_id is null && other.Update_id is null) || Update_id != null && Update_id.Equals(other.Update_id)) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (Index != null)
                {
                    hash ^= 397 * Index.GetHashCode();
                }

                if (Is_done != null)
                {
                    hash ^= 397 * Is_done.GetHashCode();
                }

                if (Update_id != null)
                {
                    hash ^= 397 * Update_id.GetHashCode();
                }

                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The column's textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.DateTime? @from, global::System.DateTime? to, global::System.DateTime? updated_At, global::System.String? visualization_Type)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            From = @from;
            To = to;
            Updated_at = updated_At;
            Visualization_type = visualization_Type;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The range of dates representing the timeline (YYYY-MM-DD)
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The start date of the timeline
        /// </summary>
        public global::System.DateTime? From { get; }
        /// <summary>
        /// The end date of the timeline
        /// </summary>
        public global::System.DateTime? To { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The visualization type for the timeline
        /// </summary>
        public global::System.String? Visualization_type { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && ((From is null && other.From is null) || From != null && From.Equals(other.From)) && ((To is null && other.To is null) || To != null && To.Equals(other.To)) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at)) && ((Visualization_type is null && other.Visualization_type is null) || Visualization_type != null && Visualization_type.Equals(other.Visualization_type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (From != null)
                {
                    hash ^= 397 * From.GetHashCode();
                }

                if (To != null)
                {
                    hash ^= 397 * To.GetHashCode();
                }

                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Visualization_type != null)
                {
                    hash ^= 397 * Visualization_type.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The range of dates representing the week (YYYY-MM-DD)
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity : global::System.IEquatable<GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity>, IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity
    {
        public GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity(global::System.String id, global::OpenMonday.Core.strawberryShake.Kind? kind)
        {
            Id = id;
            Kind = kind;
        }

        /// <summary>
        /// Id of the entity: a person or a team
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// Type of entity
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.Kind? Kind { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Kind is null && other.Kind is null) || Kind != null && Kind.Equals(other.Kind));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Kind != null)
                {
                    hash ^= 397 * Kind.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursorResult
    {
        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards?>? Boards { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards
    {
        /// <summary>
        /// The board's items (rows).
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page Items_page { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Board : IGetBoardItemsByCursor_Boards
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page
    {
        /// <summary>
        /// An opaque cursor that represents the position in the list after the last
        /// returned item. Use this cursor for pagination to fetch the next set of items.
        /// If the cursor is null, there are no more items to fetch.
        /// </summary>
        public global::System.String? Cursor { get; }
        /// <summary>
        /// The items associated with the cursor.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items> Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_ItemsResponse : IGetBoardItemsByCursor_Boards_Items_page
    {
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IItemFragment
    {
        /// <summary>
        /// The item's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The item's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The group that contains this item.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? Group { get; }
        /// <summary>
        /// The item's column values.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> Column_values { get; }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items : IItemFragment
    {
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Item : IGetBoardItemsByCursor_Boards_Items_page_Items
    {
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Group
    {
        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Group_Group : IGetBoardItemsByCursor_Boards_Items_page_Items_Group
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// A string representing all the formula values, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// A string representing all the names of the linked items, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The people and teams assigned to the item.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? Persons_and_teams { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// The index of the status in the board
        /// </summary>
        public global::System.Int32? Index { get; }
        /// <summary>
        /// Whether the status is done
        /// </summary>
        public global::System.Boolean? Is_done { get; }
        /// <summary>
        /// The ID of an update attached to the status
        /// </summary>
        public global::System.String? Update_id { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
        /// <summary>
        /// The start date of the timeline
        /// </summary>
        public global::System.DateTime? From { get; }
        /// <summary>
        /// The end date of the timeline
        /// </summary>
        public global::System.DateTime? To { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The visualization type for the timeline
        /// </summary>
        public global::System.String? Visualization_type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams
    {
        /// <summary>
        /// Id of the entity: a person or a team
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// Type of entity
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.Kind? Kind { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity : IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageResult : global::System.IEquatable<GetBoardItemsByCursor_NextPageResult>, IGetBoardItemsByCursor_NextPageResult
    {
        public GetBoardItemsByCursor_NextPageResult(global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page next_Items_Page)
        {
            Next_items_page = next_Items_Page;
        }

        /// <summary>
        /// Get next pages of board's items (rows) by cursor.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page Next_items_page { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Next_items_page.Equals(other.Next_items_page));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Next_items_page.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse>, IGetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse(global::System.String? cursor, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items> items)
        {
            Cursor = cursor;
            Items = items;
        }

        /// <summary>
        /// An opaque cursor that represents the position in the list after the last
        /// returned item. Use this cursor for pagination to fetch the next set of items.
        /// If the cursor is null, there are no more items to fetch.
        /// </summary>
        public global::System.String? Cursor { get; }
        /// <summary>
        /// The items associated with the cursor.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items> Items { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Cursor is null && other.Cursor is null) || Cursor != null && Cursor.Equals(other.Cursor))) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Cursor != null)
                {
                    hash ^= 397 * Cursor.GetHashCode();
                }

                foreach (var Items_elm in Items)
                {
                    hash ^= 397 * Items_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Item
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item(global::System.String id, global::System.String name, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? @group, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> column_Values)
        {
            Id = id;
            Name = name;
            Group = @group;
            Column_values = column_Values;
        }

        /// <summary>
        /// The item's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The item's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The group that contains this item.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? Group { get; }
        /// <summary>
        /// The item's column values.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> Column_values { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && ((Group is null && other.Group is null) || Group != null && Group.Equals(other.Group)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Column_values, other.Column_values);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Group != null)
                {
                    hash ^= 397 * Group.GetHashCode();
                }

                foreach (var Column_values_elm in Column_values)
                {
                    hash ^= 397 * Column_values_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group(global::System.String id)
        {
            Id = id;
        }

        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The formatted date and time in user time zone.
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.String display_Value)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Display_value = display_Value;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// A string representing all the formula values, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && Display_value.Equals(other.Display_value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Display_value.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.String display_Value)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Display_value = display_Value;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// A string representing all the names of the linked items, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && Display_value.Equals(other.Display_value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Display_value.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.DateTime? updated_At, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? persons_And_Teams)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Updated_at = updated_At;
            Persons_and_teams = persons_And_Teams;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The people and teams assigned to the item.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? Persons_and_teams { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Persons_and_teams, other.Persons_and_teams);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Persons_and_teams != null)
                {
                    foreach (var Persons_and_teams_elm in Persons_and_teams)
                    {
                        hash ^= 397 * Persons_and_teams_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.Int32? index, global::System.Boolean? is_Done, global::System.String? update_Id, global::System.DateTime? updated_At)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            Index = index;
            Is_done = is_Done;
            Update_id = update_Id;
            Updated_at = updated_At;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The index of the status in the board
        /// </summary>
        public global::System.Int32? Index { get; }
        /// <summary>
        /// Whether the status is done
        /// </summary>
        public global::System.Boolean? Is_done { get; }
        /// <summary>
        /// The ID of an update attached to the status
        /// </summary>
        public global::System.String? Update_id { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && global::System.Object.Equals(Index, other.Index) && global::System.Object.Equals(Is_done, other.Is_done) && ((Update_id is null && other.Update_id is null) || Update_id != null && Update_id.Equals(other.Update_id)) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (Index != null)
                {
                    hash ^= 397 * Index.GetHashCode();
                }

                if (Is_done != null)
                {
                    hash ^= 397 * Is_done.GetHashCode();
                }

                if (Update_id != null)
                {
                    hash ^= 397 * Update_id.GetHashCode();
                }

                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The column's textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename, global::System.DateTime? @from, global::System.DateTime? to, global::System.DateTime? updated_At, global::System.String? visualization_Type)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
            From = @from;
            To = to;
            Updated_at = updated_At;
            Visualization_type = visualization_Type;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The range of dates representing the timeline (YYYY-MM-DD)
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }
        /// <summary>
        /// The start date of the timeline
        /// </summary>
        public global::System.DateTime? From { get; }
        /// <summary>
        /// The end date of the timeline
        /// </summary>
        public global::System.DateTime? To { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The visualization type for the timeline
        /// </summary>
        public global::System.String? Visualization_type { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename) && ((From is null && other.From is null) || From != null && From.Equals(other.From)) && ((To is null && other.To is null) || To != null && To.Equals(other.To)) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at)) && ((Visualization_type is null && other.Visualization_type is null) || Visualization_type != null && Visualization_type.Equals(other.Visualization_type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                if (From != null)
                {
                    hash ^= 397 * From.GetHashCode();
                }

                if (To != null)
                {
                    hash ^= 397 * To.GetHashCode();
                }

                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Visualization_type != null)
                {
                    hash ^= 397 * Visualization_type.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The range of dates representing the week (YYYY-MM-DD)
        /// </summary>
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue(global::System.String id, global::System.Text.Json.JsonElement? @value, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String? text, global::System.String __typename)
        {
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            this.__typename = __typename;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        public global::System.String? Text { get; }
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Value, other.Value) && Type.Equals(other.Type) && ((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)) && __typename.Equals(other.__typename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                hash ^= 397 * Type.GetHashCode();
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                hash ^= 397 * __typename.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity : global::System.IEquatable<GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity>, IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity
    {
        public GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity(global::System.String id, global::OpenMonday.Core.strawberryShake.Kind? kind)
        {
            Id = id;
            Kind = kind;
        }

        /// <summary>
        /// Id of the entity: a person or a team
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// Type of entity
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.Kind? Kind { get; }

        public virtual global::System.Boolean Equals(GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Kind is null && other.Kind is null) || Kind != null && Kind.Equals(other.Kind));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Kind != null)
                {
                    hash ^= 397 * Kind.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPageResult
    {
        /// <summary>
        /// Get next pages of board's items (rows) by cursor.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page Next_items_page { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page
    {
        /// <summary>
        /// An opaque cursor that represents the position in the list after the last
        /// returned item. Use this cursor for pagination to fetch the next set of items.
        /// If the cursor is null, there are no more items to fetch.
        /// </summary>
        public global::System.String? Cursor { get; }
        /// <summary>
        /// The items associated with the cursor.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items> Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse : IGetBoardItemsByCursor_NextPage_Next_items_page
    {
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items : IItemFragment
    {
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Item : IGetBoardItemsByCursor_NextPage_Next_items_page_Items
    {
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Group
    {
        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Group_Group : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Group
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's raw value in JSON format.
        /// </summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// Text representation of the column value. Note: Not all columns support textual value
        /// </summary>
        public global::System.String? Text { get; }
        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_BoardRelationValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ButtonValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CheckboxValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ColorPickerValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CountryValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_CreationLogValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DateValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DependencyValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DocValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_DropdownValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_EmailValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FileValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_FormulaValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// A string representing all the formula values, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_GroupValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_HourValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_IntegrationValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ItemIdValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LastUpdatedValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LinkValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LocationValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_LongTextValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_MirrorValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// A string representing all the names of the linked items, separated by commas
        /// </summary>
        public global::System.String Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_NumbersValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PeopleValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The people and teams assigned to the item.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? Persons_and_teams { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PersonValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_PhoneValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_ProgressValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_RatingValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_StatusValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// The index of the status in the board
        /// </summary>
        public global::System.Int32? Index { get; }
        /// <summary>
        /// Whether the status is done
        /// </summary>
        public global::System.Boolean? Is_done { get; }
        /// <summary>
        /// The ID of an update attached to the status
        /// </summary>
        public global::System.String? Update_id { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_SubtasksValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TagsValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TeamValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TextValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimelineValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
        /// <summary>
        /// The start date of the timeline
        /// </summary>
        public global::System.DateTime? From { get; }
        /// <summary>
        /// The end date of the timeline
        /// </summary>
        public global::System.DateTime? To { get; }
        /// <summary>
        /// The date when column value was last updated.
        /// </summary>
        public global::System.DateTime? Updated_at { get; }
        /// <summary>
        /// The visualization type for the timeline
        /// </summary>
        public global::System.String? Visualization_type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_TimeTrackingValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_UnsupportedValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_VoteValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WeekValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_WorldClockValue : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams
    {
        /// <summary>
        /// Id of the entity: a person or a team
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// Type of entity
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.Kind? Kind { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams_PeopleEntity : IGetBoardItemsByCursor_NextPage_Next_items_page_Items_Column_values_Persons_and_teams
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdResult : global::System.IEquatable<GetBoardsStructureByIdResult>, IGetBoardsStructureByIdResult
    {
        public GetBoardsStructureByIdResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards?>? boards)
        {
            Boards = boards;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards?>? Boards { get; }

        public virtual global::System.Boolean Equals(GetBoardsStructureByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Boards, other.Boards));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardsStructureByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boards != null)
                {
                    foreach (var Boards_elm in Boards)
                    {
                        if (Boards_elm != null)
                        {
                            hash ^= 397 * Boards_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureById_Boards_Board : global::System.IEquatable<GetBoardsStructureById_Boards_Board>, IGetBoardsStructureById_Boards_Board
    {
        public GetBoardsStructureById_Boards_Board(global::System.String id, global::System.String name, global::System.String? updated_At, global::System.Int32? items_Count, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns?>? columns, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups?>? groups)
        {
            Id = id;
            Name = name;
            Updated_at = updated_At;
            Items_count = items_Count;
            Columns = columns;
            Groups = groups;
        }

        /// <summary>
        /// The unique identifier of the board.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The board's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The last time the board was updated at.
        /// </summary>
        public global::System.String? Updated_at { get; }
        /// <summary>
        /// The number of items on the board
        /// </summary>
        public global::System.Int32? Items_count { get; }
        /// <summary>
        /// The board's visible columns.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns?>? Columns { get; }
        /// <summary>
        /// The board's visible groups.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups?>? Groups { get; }

        public virtual global::System.Boolean Equals(GetBoardsStructureById_Boards_Board? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && ((Updated_at is null && other.Updated_at is null) || Updated_at != null && Updated_at.Equals(other.Updated_at)) && global::System.Object.Equals(Items_count, other.Items_count) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Columns, other.Columns) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Groups, other.Groups);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardsStructureById_Boards_Board)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Updated_at != null)
                {
                    hash ^= 397 * Updated_at.GetHashCode();
                }

                if (Items_count != null)
                {
                    hash ^= 397 * Items_count.GetHashCode();
                }

                if (Columns != null)
                {
                    foreach (var Columns_elm in Columns)
                    {
                        if (Columns_elm != null)
                        {
                            hash ^= 397 * Columns_elm.GetHashCode();
                        }
                    }
                }

                if (Groups != null)
                {
                    foreach (var Groups_elm in Groups)
                    {
                        if (Groups_elm != null)
                        {
                            hash ^= 397 * Groups_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureById_Boards_Columns_Column : global::System.IEquatable<GetBoardsStructureById_Boards_Columns_Column>, IGetBoardsStructureById_Boards_Columns_Column
    {
        public GetBoardsStructureById_Boards_Columns_Column(global::System.String id, global::System.String title, global::OpenMonday.Core.strawberryShake.ColumnType type, global::System.String settings_Str)
        {
            Id = id;
            Title = title;
            Type = type;
            Settings_str = settings_Str;
        }

        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's title.
        /// </summary>
        public global::System.String Title { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The column's settings in a string form.
        /// </summary>
        public global::System.String Settings_str { get; }

        public virtual global::System.Boolean Equals(GetBoardsStructureById_Boards_Columns_Column? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Title.Equals(other.Title) && Type.Equals(other.Type) && Settings_str.Equals(other.Settings_str);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardsStructureById_Boards_Columns_Column)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Settings_str.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureById_Boards_Groups_Group : global::System.IEquatable<GetBoardsStructureById_Boards_Groups_Group>, IGetBoardsStructureById_Boards_Groups_Group
    {
        public GetBoardsStructureById_Boards_Groups_Group(global::System.String title, global::System.String id)
        {
            Title = title;
            Id = id;
        }

        /// <summary>
        /// The group's title.
        /// </summary>
        public global::System.String Title { get; }
        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetBoardsStructureById_Boards_Groups_Group? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title)) && Id.Equals(other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBoardsStructureById_Boards_Groups_Group)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureByIdResult
    {
        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards?>? Boards { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards
    {
        /// <summary>
        /// The unique identifier of the board.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The board's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The last time the board was updated at.
        /// </summary>
        public global::System.String? Updated_at { get; }
        /// <summary>
        /// The number of items on the board
        /// </summary>
        public global::System.Int32? Items_count { get; }
        /// <summary>
        /// The board's visible columns.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns?>? Columns { get; }
        /// <summary>
        /// The board's visible groups.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups?>? Groups { get; }
    }

    /// <summary>
    /// A monday.com board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards_Board : IGetBoardsStructureById_Boards
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards_Columns
    {
        /// <summary>
        /// The column's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The column's title.
        /// </summary>
        public global::System.String Title { get; }
        /// <summary>
        /// The column's type.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType Type { get; }
        /// <summary>
        /// The column's settings in a string form.
        /// </summary>
        public global::System.String Settings_str { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards_Columns_Column : IGetBoardsStructureById_Boards_Columns
    {
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards_Groups
    {
        /// <summary>
        /// The group's title.
        /// </summary>
        public global::System.String Title { get; }
        /// <summary>
        /// The group's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
    }

    /// <summary>
    /// A group of items in a board.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureById_Boards_Groups_Group : IGetBoardsStructureById_Boards_Groups
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsResult : global::System.IEquatable<GetTeamsByIdsResult>, IGetTeamsByIdsResult
    {
        public GetTeamsByIdsResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams?>? teams)
        {
            Teams = teams;
        }

        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams?>? Teams { get; }

        public virtual global::System.Boolean Equals(GetTeamsByIdsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Teams, other.Teams));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeamsByIdsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Teams != null)
                {
                    foreach (var Teams_elm in Teams)
                    {
                        if (Teams_elm != null)
                        {
                            hash ^= 397 * Teams_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIds_Teams_Team : global::System.IEquatable<GetTeamsByIds_Teams_Team>, IGetTeamsByIds_Teams_Team
    {
        public GetTeamsByIds_Teams_Team(global::System.String id, global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners> owners, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users?>? users)
        {
            Id = id;
            Name = name;
            Owners = owners;
            Users = users;
        }

        /// <summary>
        /// The team's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The team's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The users who are the owners of the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners> Owners { get; }
        /// <summary>
        /// The users in the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users?>? Users { get; }

        public virtual global::System.Boolean Equals(GetTeamsByIds_Teams_Team? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Owners, other.Owners) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeamsByIds_Teams_Team)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                foreach (var Owners_elm in Owners)
                {
                    hash ^= 397 * Owners_elm.GetHashCode();
                }

                if (Users != null)
                {
                    foreach (var Users_elm in Users)
                    {
                        if (Users_elm != null)
                        {
                            hash ^= 397 * Users_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIds_Teams_Owners_User : global::System.IEquatable<GetTeamsByIds_Teams_Owners_User>, IGetTeamsByIds_Teams_Owners_User
    {
        public GetTeamsByIds_Teams_Owners_User(global::System.String id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetTeamsByIds_Teams_Owners_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeamsByIds_Teams_Owners_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIds_Teams_Users_User : global::System.IEquatable<GetTeamsByIds_Teams_Users_User>, IGetTeamsByIds_Teams_Users_User
    {
        public GetTeamsByIds_Teams_Users_User(global::System.String id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetTeamsByIds_Teams_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeamsByIds_Teams_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIdsResult
    {
        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams?>? Teams { get; }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams
    {
        /// <summary>
        /// The team's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The team's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The users who are the owners of the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners> Owners { get; }
        /// <summary>
        /// The users in the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users?>? Users { get; }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams_Team : IGetTeamsByIds_Teams
    {
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams_Owners
    {
        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams_Owners_User : IGetTeamsByIds_Teams_Owners
    {
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams_Users
    {
        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIds_Teams_Users_User : IGetTeamsByIds_Teams_Users
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsResult : global::System.IEquatable<GetTeamsResult>, IGetTeamsResult
    {
        public GetTeamsResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams?>? teams)
        {
            Teams = teams;
        }

        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams?>? Teams { get; }

        public virtual global::System.Boolean Equals(GetTeamsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Teams, other.Teams));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeamsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Teams != null)
                {
                    foreach (var Teams_elm in Teams)
                    {
                        if (Teams_elm != null)
                        {
                            hash ^= 397 * Teams_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeams_Teams_Team : global::System.IEquatable<GetTeams_Teams_Team>, IGetTeams_Teams_Team
    {
        public GetTeams_Teams_Team(global::System.String id, global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners> owners, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users?>? users)
        {
            Id = id;
            Name = name;
            Owners = owners;
            Users = users;
        }

        /// <summary>
        /// The team's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The team's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The users who are the owners of the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners> Owners { get; }
        /// <summary>
        /// The users in the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users?>? Users { get; }

        public virtual global::System.Boolean Equals(GetTeams_Teams_Team? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Owners, other.Owners) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeams_Teams_Team)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                foreach (var Owners_elm in Owners)
                {
                    hash ^= 397 * Owners_elm.GetHashCode();
                }

                if (Users != null)
                {
                    foreach (var Users_elm in Users)
                    {
                        if (Users_elm != null)
                        {
                            hash ^= 397 * Users_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeams_Teams_Owners_User : global::System.IEquatable<GetTeams_Teams_Owners_User>, IGetTeams_Teams_Owners_User
    {
        public GetTeams_Teams_Owners_User(global::System.String id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetTeams_Teams_Owners_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeams_Teams_Owners_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeams_Teams_Users_User : global::System.IEquatable<GetTeams_Teams_Users_User>, IGetTeams_Teams_Users_User
    {
        public GetTeams_Teams_Users_User(global::System.String id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetTeams_Teams_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTeams_Teams_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsResult
    {
        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams?>? Teams { get; }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams
    {
        /// <summary>
        /// The team's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The team's name.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// The users who are the owners of the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners> Owners { get; }
        /// <summary>
        /// The users in the team.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users?>? Users { get; }
    }

    /// <summary>
    /// A team of users.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams_Team : IGetTeams_Teams
    {
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams_Owners
    {
        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams_Owners_User : IGetTeams_Teams_Owners
    {
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams_Users
    {
        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeams_Teams_Users_User : IGetTeams_Teams_Users
    {
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersResult : global::System.IEquatable<GetUsersResult>, IGetUsersResult
    {
        public GetUsersResult(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetUsers_Users?>? users)
        {
            Users = users;
        }

        /// <summary>
        /// Get a collection of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetUsers_Users?>? Users { get; }

        public virtual global::System.Boolean Equals(GetUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Users != null)
                {
                    foreach (var Users_elm in Users)
                    {
                        if (Users_elm != null)
                        {
                            hash ^= 397 * Users_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsers_Users_User : global::System.IEquatable<GetUsers_Users_User>, IGetUsers_Users_User
    {
        public GetUsers_Users_User(global::System.String id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Get your data from monday.com
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetUsersResult
    {
        /// <summary>
        /// Get a collection of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetUsers_Users?>? Users { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetUsers_Users
    {
        /// <summary>
        /// The user's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
        /// <summary>
        /// The user's name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A monday.com user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetUsers_Users_User : IGetUsers_Users
    {
    }

    /// <summary>
    /// Update your monday.com data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeResult : global::System.IEquatable<UpdateBoardAttributeResult>, IUpdateBoardAttributeResult
    {
        public UpdateBoardAttributeResult(global::System.Text.Json.JsonElement? update_Board)
        {
            Update_board = update_Board;
        }

        /// <summary>
        /// Update Board attribute.
        /// </summary>
        public global::System.Text.Json.JsonElement? Update_board { get; }

        public virtual global::System.Boolean Equals(UpdateBoardAttributeResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Update_board, other.Update_board));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateBoardAttributeResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Update_board != null)
                {
                    hash ^= 397 * Update_board.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Update your monday.com data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateBoardAttributeResult
    {
        /// <summary>
        /// Update Board attribute.
        /// </summary>
        public global::System.Text.Json.JsonElement? Update_board { get; }
    }

    /// <summary>
    /// Update your monday.com data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueResult : global::System.IEquatable<UpdateChangeSimpleColumnValueResult>, IUpdateChangeSimpleColumnValueResult
    {
        public UpdateChangeSimpleColumnValueResult(global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValue_Change_simple_column_value? change_Simple_Column_Value)
        {
            Change_simple_column_value = change_Simple_Column_Value;
        }

        /// <summary>
        /// Change an item's column with simple value.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValue_Change_simple_column_value? Change_simple_column_value { get; }

        public virtual global::System.Boolean Equals(UpdateChangeSimpleColumnValueResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Change_simple_column_value is null && other.Change_simple_column_value is null) || Change_simple_column_value != null && Change_simple_column_value.Equals(other.Change_simple_column_value)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateChangeSimpleColumnValueResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Change_simple_column_value != null)
                {
                    hash ^= 397 * Change_simple_column_value.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValue_Change_simple_column_value_Item : global::System.IEquatable<UpdateChangeSimpleColumnValue_Change_simple_column_value_Item>, IUpdateChangeSimpleColumnValue_Change_simple_column_value_Item
    {
        public UpdateChangeSimpleColumnValue_Change_simple_column_value_Item(global::System.String id)
        {
            Id = id;
        }

        /// <summary>
        /// The item's unique identifier.
        /// </summary>
        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(UpdateChangeSimpleColumnValue_Change_simple_column_value_Item? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateChangeSimpleColumnValue_Change_simple_column_value_Item)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Update your monday.com data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateChangeSimpleColumnValueResult
    {
        /// <summary>
        /// Change an item's column with simple value.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValue_Change_simple_column_value? Change_simple_column_value { get; }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateChangeSimpleColumnValue_Change_simple_column_value
    {
        /// <summary>
        /// The item's unique identifier.
        /// </summary>
        public global::System.String Id { get; }
    }

    /// <summary>
    /// An item (table row).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateChangeSimpleColumnValue_Change_simple_column_value_Item : IUpdateChangeSimpleColumnValue_Change_simple_column_value
    {
    }

    /// <summary>
    /// The columns to create.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public enum ColumnType
    {
        /// <summary>
        /// Number items according to their order in the group/board
        /// </summary>
        AutoNumber,
        /// <summary>
        /// Connect data from other boards
        /// </summary>
        BoardRelation,
        /// <summary>
        /// Perform actions on items by clicking a button
        /// </summary>
        Button,
        /// <summary>
        /// Check off items and see what's done at a glance
        /// </summary>
        Checkbox,
        /// <summary>
        /// Manage a design system using a color palette
        /// </summary>
        ColorPicker,
        /// <summary>
        /// Choose a country
        /// </summary>
        Country,
        /// <summary>
        /// Add the item's creator and creation date automatically
        /// </summary>
        CreationLog,
        /// <summary>
        /// Add dates like deadlines to ensure you never drop the ball
        /// </summary>
        Date,
        /// <summary>
        /// Set up dependencies between items in the board
        /// </summary>
        Dependency,
        /// <summary>
        /// Document your work and increase collaboration
        /// </summary>
        Doc,
        /// <summary>
        /// Create a dropdown list of options
        /// </summary>
        Dropdown,
        /// <summary>
        /// Email team members and clients directly from your board
        /// </summary>
        Email,
        /// <summary>
        /// Add files & docs to your item
        /// </summary>
        File,
        /// <summary>
        /// Use functions to manipulate data across multiple columns
        /// </summary>
        Formula,
        Group,
        /// <summary>
        /// Add times to manage and schedule tasks, shifts and more
        /// </summary>
        Hour,
        /// <summary>
        /// Integration is really cool...
        /// </summary>
        Integration,
        /// <summary>
        /// Show all item's assignees
        /// </summary>
        ItemAssignees,
        /// <summary>
        /// Show a unique ID for each item
        /// </summary>
        ItemId,
        /// <summary>
        /// Add the person that last updated the item and the date
        /// </summary>
        LastUpdated,
        /// <summary>
        /// Simply hyperlink to any website
        /// </summary>
        Link,
        /// <summary>
        /// Place multiple locations on a geographic map
        /// </summary>
        Location,
        /// <summary>
        /// Add large amounts of text without changing column width
        /// </summary>
        LongText,
        /// <summary>
        /// Show and edit columns' data from connected boards
        /// </summary>
        Mirror,
        /// <summary>
        /// Name is really cool...
        /// </summary>
        Name,
        /// <summary>
        /// Add revenue, costs, time estimations and more
        /// </summary>
        Numbers,
        /// <summary>
        /// Assign people to improve team work
        /// </summary>
        People,
        /// <summary>
        /// Assign a person to increase ownership and accountability (deprecated)
        /// </summary>
        Person,
        /// <summary>
        /// Call your contacts directly from monday.com
        /// </summary>
        Phone,
        /// <summary>
        /// Show progress by combining status columns in a battery
        /// </summary>
        Progress,
        /// <summary>
        /// Rate or rank anything visually
        /// </summary>
        Rating,
        /// <summary>
        /// Get an instant overview of where things stand
        /// </summary>
        Status,
        /// <summary>
        /// Use the subtasks column to create another level of tasks
        /// </summary>
        Subtasks,
        /// <summary>
        /// Add tags to categorize items across multiple boards
        /// </summary>
        Tags,
        /// <summary>
        /// Assign a full team to an item 
        /// </summary>
        Team,
        /// <summary>
        /// Add textual information e.g. addresses, names or keywords
        /// </summary>
        Text,
        /// <summary>
        /// Easily track time spent on each item, group, and board
        /// </summary>
        TimeTracking,
        /// <summary>
        /// Visualize your item’s duration, with a start and end date
        /// </summary>
        Timeline,
        /// <summary>
        /// Unsupported column type
        /// </summary>
        Unsupported,
        /// <summary>
        /// Vote on an item e.g. pick a new feature or a favorite lunch place
        /// </summary>
        Vote,
        /// <summary>
        /// Select the week on which each item should be completed
        /// </summary>
        Week,
        /// <summary>
        /// Keep track of the time anywhere in the world
        /// </summary>
        WorldClock
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ColumnTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ColumnType>
    {
        public global::System.String TypeName => "ColumnType";

        public ColumnType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "auto_number" => ColumnType.AutoNumber,
                "board_relation" => ColumnType.BoardRelation,
                "button" => ColumnType.Button,
                "checkbox" => ColumnType.Checkbox,
                "color_picker" => ColumnType.ColorPicker,
                "country" => ColumnType.Country,
                "creation_log" => ColumnType.CreationLog,
                "date" => ColumnType.Date,
                "dependency" => ColumnType.Dependency,
                "doc" => ColumnType.Doc,
                "dropdown" => ColumnType.Dropdown,
                "email" => ColumnType.Email,
                "file" => ColumnType.File,
                "formula" => ColumnType.Formula,
                "group" => ColumnType.Group,
                "hour" => ColumnType.Hour,
                "integration" => ColumnType.Integration,
                "item_assignees" => ColumnType.ItemAssignees,
                "item_id" => ColumnType.ItemId,
                "last_updated" => ColumnType.LastUpdated,
                "link" => ColumnType.Link,
                "location" => ColumnType.Location,
                "long_text" => ColumnType.LongText,
                "mirror" => ColumnType.Mirror,
                "name" => ColumnType.Name,
                "numbers" => ColumnType.Numbers,
                "people" => ColumnType.People,
                "person" => ColumnType.Person,
                "phone" => ColumnType.Phone,
                "progress" => ColumnType.Progress,
                "rating" => ColumnType.Rating,
                "status" => ColumnType.Status,
                "subtasks" => ColumnType.Subtasks,
                "tags" => ColumnType.Tags,
                "team" => ColumnType.Team,
                "text" => ColumnType.Text,
                "time_tracking" => ColumnType.TimeTracking,
                "timeline" => ColumnType.Timeline,
                "unsupported" => ColumnType.Unsupported,
                "vote" => ColumnType.Vote,
                "week" => ColumnType.Week,
                "world_clock" => ColumnType.WorldClock,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum ColumnType")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ColumnType.AutoNumber => "auto_number",
                ColumnType.BoardRelation => "board_relation",
                ColumnType.Button => "button",
                ColumnType.Checkbox => "checkbox",
                ColumnType.ColorPicker => "color_picker",
                ColumnType.Country => "country",
                ColumnType.CreationLog => "creation_log",
                ColumnType.Date => "date",
                ColumnType.Dependency => "dependency",
                ColumnType.Doc => "doc",
                ColumnType.Dropdown => "dropdown",
                ColumnType.Email => "email",
                ColumnType.File => "file",
                ColumnType.Formula => "formula",
                ColumnType.Group => "group",
                ColumnType.Hour => "hour",
                ColumnType.Integration => "integration",
                ColumnType.ItemAssignees => "item_assignees",
                ColumnType.ItemId => "item_id",
                ColumnType.LastUpdated => "last_updated",
                ColumnType.Link => "link",
                ColumnType.Location => "location",
                ColumnType.LongText => "long_text",
                ColumnType.Mirror => "mirror",
                ColumnType.Name => "name",
                ColumnType.Numbers => "numbers",
                ColumnType.People => "people",
                ColumnType.Person => "person",
                ColumnType.Phone => "phone",
                ColumnType.Progress => "progress",
                ColumnType.Rating => "rating",
                ColumnType.Status => "status",
                ColumnType.Subtasks => "subtasks",
                ColumnType.Tags => "tags",
                ColumnType.Team => "team",
                ColumnType.Text => "text",
                ColumnType.TimeTracking => "time_tracking",
                ColumnType.Timeline => "timeline",
                ColumnType.Unsupported => "unsupported",
                ColumnType.Vote => "vote",
                ColumnType.Week => "week",
                ColumnType.WorldClock => "world_clock",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum ColumnType value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Kind of assignee
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public enum Kind
    {
        /// <summary>
        /// Represents a person
        /// </summary>
        Person,
        /// <summary>
        /// Represents a team
        /// </summary>
        Team
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class KindSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Kind>
    {
        public global::System.String TypeName => "Kind";

        public Kind Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "person" => Kind.Person,
                "team" => Kind.Team,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum Kind")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                Kind.Person => "person",
                Kind.Team => "team",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum Kind value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// The board attributes available.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public enum BoardAttributes
    {
        /// <summary>
        /// Object that contains available Video conferences on the board.
        /// </summary>
        Communication,
        /// <summary>
        /// Board description.
        /// </summary>
        Description,
        /// <summary>
        /// Board name.
        /// </summary>
        Name
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class BoardAttributesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, BoardAttributes>
    {
        public global::System.String TypeName => "BoardAttributes";

        public BoardAttributes Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "communication" => BoardAttributes.Communication,
                "description" => BoardAttributes.Description,
                "name" => BoardAttributes.Name,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum BoardAttributes")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                BoardAttributes.Communication => "communication",
                BoardAttributes.Description => "description",
                BoardAttributes.Name => "name",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum BoardAttributes value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetActivityLog GraphQL operation
    /// <code>
    /// query GetActivityLog($ids: [ID!], $from: ISO8601DateTime, $to: ISO8601DateTime) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     updated_at
    ///     activity_logs(from: $from, to: $to) {
    ///       __typename
    ///       id
    ///       user_id
    ///       event
    ///       created_at
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogQueryDocument : global::StrawberryShake.IDocument
    {
        private GetActivityLogQueryDocument()
        {
        }

        public static GetActivityLogQueryDocument Instance { get; } = new GetActivityLogQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x63,
            0x74,
            0x69,
            0x76,
            0x69,
            0x74,
            0x79,
            0x4c,
            0x6f,
            0x67,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x44,
            0x21,
            0x5d,
            0x2c,
            0x20,
            0x24,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x3a,
            0x20,
            0x49,
            0x53,
            0x4f,
            0x38,
            0x36,
            0x30,
            0x31,
            0x44,
            0x61,
            0x74,
            0x65,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x2c,
            0x20,
            0x24,
            0x74,
            0x6f,
            0x3a,
            0x20,
            0x49,
            0x53,
            0x4f,
            0x38,
            0x36,
            0x30,
            0x31,
            0x44,
            0x61,
            0x74,
            0x65,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x73,
            0x28,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x76,
            0x69,
            0x74,
            0x79,
            0x5f,
            0x6c,
            0x6f,
            0x67,
            0x73,
            0x28,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x2c,
            0x20,
            0x74,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x74,
            0x6f,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x5f,
            0x69,
            0x64,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1a47c1be3ea882a3a1bcd26775e00395");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetActivityLog GraphQL operation
    /// <code>
    /// query GetActivityLog($ids: [ID!], $from: ISO8601DateTime, $to: ISO8601DateTime) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     updated_at
    ///     activity_logs(from: $from, to: $to) {
    ///       __typename
    ///       id
    ///       user_id
    ///       event
    ///       created_at
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogQuery : global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetActivityLogResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iSO8601DateTimeFormatter;
        public GetActivityLogQuery(global::StrawberryShake.IOperationExecutor<IGetActivityLogResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _iSO8601DateTimeFormatter = serializerResolver.GetInputValueFormatter("ISO8601DateTime");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetActivityLogResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetActivityLogResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? @from, global::System.String? to, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids, @from, to);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetActivityLogResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? @from, global::System.String? to, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids, @from, to);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? @from, global::System.String? to)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            variables.Add("from", FormatFrom(@from));
            variables.Add("to", FormatTo(to));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetActivityLogQueryDocument.Instance.Hash.Value, name: "GetActivityLog", document: GetActivityLogQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.Collections.Generic.IReadOnlyList<global::System.String>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_iDFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        private global::System.Object? FormatFrom(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _iSO8601DateTimeFormatter.Format(value);
            }
        }

        private global::System.Object? FormatTo(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _iSO8601DateTimeFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetActivityLog GraphQL operation
    /// <code>
    /// query GetActivityLog($ids: [ID!], $from: ISO8601DateTime, $to: ISO8601DateTime) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     updated_at
    ///     activity_logs(from: $from, to: $to) {
    ///       __typename
    ///       id
    ///       user_id
    ///       event
    ///       created_at
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetActivityLogQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetActivityLogResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? @from, global::System.String? to, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetActivityLogResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String>? ids, global::System.String? @from, global::System.String? to, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     items_page(limit: 100) {
    ///       __typename
    ///       cursor
    ///       items {
    ///         __typename
    ///         ... ItemFragment
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBoardItemsByCursorQueryDocument()
        {
        }

        public static GetBoardItemsByCursorQueryDocument Instance { get; } = new GetBoardItemsByCursorQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x42,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x42,
            0x79,
            0x43,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x44,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x73,
            0x28,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x5f,
            0x70,
            0x61,
            0x67,
            0x65,
            0x28,
            0x6c,
            0x69,
            0x6d,
            0x69,
            0x74,
            0x3a,
            0x20,
            0x31,
            0x30,
            0x30,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x72,
            0x6f,
            0x75,
            0x70,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x74,
            0x65,
            0x78,
            0x74,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x65,
            0x6f,
            0x70,
            0x6c,
            0x65,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x73,
            0x5f,
            0x61,
            0x6e,
            0x64,
            0x5f,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6b,
            0x69,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x20,
            0x69,
            0x73,
            0x5f,
            0x64,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x5f,
            0x69,
            0x64,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x69,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x6c,
            0x69,
            0x6e,
            0x65,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x20,
            0x74,
            0x6f,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x76,
            0x69,
            0x73,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x7a,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x46,
            0x6f,
            0x72,
            0x6d,
            0x75,
            0x6c,
            0x61,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "99b1786e6a260fbe21dbd4b6e10b079a");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     items_page(limit: 100) {
    ///       __typename
    ///       cursor
    ///       items {
    ///         __typename
    ///         ... ItemFragment
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorQuery : global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBoardItemsByCursorResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetBoardItemsByCursorQuery(global::StrawberryShake.IOperationExecutor<IGetBoardItemsByCursorResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBoardItemsByCursorResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursorResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursorResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBoardItemsByCursorQueryDocument.Instance.Hash.Value, name: "GetBoardItemsByCursor", document: GetBoardItemsByCursorQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_iDFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     items_page(limit: 100) {
    ///       __typename
    ///       cursor
    ///       items {
    ///         __typename
    ///         ... ItemFragment
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursorQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursorResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursorResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor_NextPage GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor_NextPage($cursor: String!) {
    ///   next_items_page(limit: 500, cursor: $cursor) {
    ///     __typename
    ///     cursor
    ///     items {
    ///       __typename
    ///       ... ItemFragment
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBoardItemsByCursor_NextPageQueryDocument()
        {
        }

        public static GetBoardItemsByCursor_NextPageQueryDocument Instance { get; } = new GetBoardItemsByCursor_NextPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x42,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x42,
            0x79,
            0x43,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x5f,
            0x4e,
            0x65,
            0x78,
            0x74,
            0x50,
            0x61,
            0x67,
            0x65,
            0x28,
            0x24,
            0x63,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6e,
            0x65,
            0x78,
            0x74,
            0x5f,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x5f,
            0x70,
            0x61,
            0x67,
            0x65,
            0x28,
            0x6c,
            0x69,
            0x6d,
            0x69,
            0x74,
            0x3a,
            0x20,
            0x35,
            0x30,
            0x30,
            0x2c,
            0x20,
            0x63,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x75,
            0x72,
            0x73,
            0x6f,
            0x72,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x46,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x49,
            0x74,
            0x65,
            0x6d,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x72,
            0x6f,
            0x75,
            0x70,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x74,
            0x65,
            0x78,
            0x74,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x65,
            0x6f,
            0x70,
            0x6c,
            0x65,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x70,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x73,
            0x5f,
            0x61,
            0x6e,
            0x64,
            0x5f,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6b,
            0x69,
            0x6e,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x20,
            0x69,
            0x73,
            0x5f,
            0x64,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x5f,
            0x69,
            0x64,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x69,
            0x72,
            0x72,
            0x6f,
            0x72,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x54,
            0x69,
            0x6d,
            0x65,
            0x6c,
            0x69,
            0x6e,
            0x65,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x20,
            0x74,
            0x6f,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x76,
            0x69,
            0x73,
            0x75,
            0x61,
            0x6c,
            0x69,
            0x7a,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x46,
            0x6f,
            0x72,
            0x6d,
            0x75,
            0x6c,
            0x61,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2f078d30df537d5dc54533e5264ffbbb");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor_NextPage GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor_NextPage($cursor: String!) {
    ///   next_items_page(limit: 500, cursor: $cursor) {
    ///     __typename
    ///     cursor
    ///     items {
    ///       __typename
    ///       ... ItemFragment
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageQuery : global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBoardItemsByCursor_NextPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetBoardItemsByCursor_NextPageQuery(global::StrawberryShake.IOperationExecutor<IGetBoardItemsByCursor_NextPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBoardItemsByCursor_NextPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursor_NextPageResult>> ExecuteAsync(global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(cursor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursor_NextPageResult>> Watch(global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(cursor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String cursor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("cursor", FormatCursor(cursor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBoardItemsByCursor_NextPageQueryDocument.Instance.Hash.Value, name: "GetBoardItemsByCursor_NextPage", document: GetBoardItemsByCursor_NextPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCursor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardItemsByCursor_NextPage GraphQL operation
    /// <code>
    /// query GetBoardItemsByCursor_NextPage($cursor: String!) {
    ///   next_items_page(limit: 500, cursor: $cursor) {
    ///     __typename
    ///     cursor
    ///     items {
    ///       __typename
    ///       ... ItemFragment
    ///     }
    ///   }
    /// }
    /// 
    /// fragment ItemFragment on Item {
    ///   id
    ///   name
    ///   group {
    ///     __typename
    ///     id
    ///   }
    ///   column_values {
    ///     id
    ///     value
    ///     type
    ///     text
    ///     __typename
    ///     ... on PeopleValue {
    ///       updated_at
    ///       persons_and_teams {
    ///         __typename
    ///         id
    ///         kind
    ///       }
    ///     }
    ///     ... on StatusValue {
    ///       index
    ///       is_done
    ///       update_id
    ///       updated_at
    ///     }
    ///     ... on MirrorValue {
    ///       display_value
    ///     }
    ///     ... on TimelineValue {
    ///       from
    ///       to
    ///       updated_at
    ///       visualization_type
    ///     }
    ///     ... on FormulaValue {
    ///       display_value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardItemsByCursor_NextPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursor_NextPageResult>> ExecuteAsync(global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardItemsByCursor_NextPageResult>> Watch(global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetBoardsStructureById GraphQL operation
    /// <code>
    /// query GetBoardsStructureById($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     updated_at
    ///     items_count
    ///     columns {
    ///       __typename
    ///       id
    ///       title
    ///       type
    ///       settings_str
    ///     }
    ///     groups {
    ///       __typename
    ///       title
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBoardsStructureByIdQueryDocument()
        {
        }

        public static GetBoardsStructureByIdQueryDocument Instance { get; } = new GetBoardsStructureByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x42,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x73,
            0x53,
            0x74,
            0x72,
            0x75,
            0x63,
            0x74,
            0x75,
            0x72,
            0x65,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x44,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x73,
            0x28,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x73,
            0x5f,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x73,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x5f,
            0x73,
            0x74,
            0x72,
            0x20,
            0x7d,
            0x20,
            0x67,
            0x72,
            0x6f,
            0x75,
            0x70,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1cddf3e9531f7bf57150f9ad2171ac28");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardsStructureById GraphQL operation
    /// <code>
    /// query GetBoardsStructureById($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     updated_at
    ///     items_count
    ///     columns {
    ///       __typename
    ///       id
    ///       title
    ///       type
    ///       settings_str
    ///     }
    ///     groups {
    ///       __typename
    ///       title
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdQuery : global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBoardsStructureByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetBoardsStructureByIdQuery(global::StrawberryShake.IOperationExecutor<IGetBoardsStructureByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBoardsStructureByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardsStructureByIdResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardsStructureByIdResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBoardsStructureByIdQueryDocument.Instance.Hash.Value, name: "GetBoardsStructureById", document: GetBoardsStructureByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_iDFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBoardsStructureById GraphQL operation
    /// <code>
    /// query GetBoardsStructureById($ids: [ID!]!) {
    ///   boards(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     updated_at
    ///     items_count
    ///     columns {
    ///       __typename
    ///       id
    ///       title
    ///       type
    ///       settings_str
    ///     }
    ///     groups {
    ///       __typename
    ///       title
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetBoardsStructureByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBoardsStructureByIdResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBoardsStructureByIdResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTeamsByIds GraphQL operation
    /// <code>
    /// query GetTeamsByIds($ids: [ID!]!) {
    ///   teams(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTeamsByIdsQueryDocument()
        {
        }

        public static GetTeamsByIdsQueryDocument Instance { get; } = new GetTeamsByIdsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x54,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x42,
            0x79,
            0x49,
            0x64,
            0x73,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x44,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x28,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6f,
            0x77,
            0x6e,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "400c701dbb3ddd4d71cb2854e6dc418d");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTeamsByIds GraphQL operation
    /// <code>
    /// query GetTeamsByIds($ids: [ID!]!) {
    ///   teams(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsQuery : global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTeamsByIdsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetTeamsByIdsQuery(global::StrawberryShake.IOperationExecutor<IGetTeamsByIdsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTeamsByIdsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTeamsByIdsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTeamsByIdsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTeamsByIdsQueryDocument.Instance.Hash.Value, name: "GetTeamsByIds", document: GetTeamsByIdsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.Collections.Generic.IReadOnlyList<global::System.String> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_iDFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTeamsByIds GraphQL operation
    /// <code>
    /// query GetTeamsByIds($ids: [ID!]!) {
    ///   teams(ids: $ids) {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsByIdsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTeamsByIdsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTeamsByIdsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.String> ids, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTeams GraphQL operation
    /// <code>
    /// query GetTeams {
    ///   teams {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTeamsQueryDocument()
        {
        }

        public static GetTeamsQueryDocument Instance { get; } = new GetTeamsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x54,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x74,
            0x65,
            0x61,
            0x6d,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6f,
            0x77,
            0x6e,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9d78c1245bc5bb5b02d81d34db0c565d");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTeams GraphQL operation
    /// <code>
    /// query GetTeams {
    ///   teams {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsQuery : global::OpenMonday.Core.strawberryShake.IGetTeamsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTeamsResult> _operationExecutor;
        public GetTeamsQuery(global::StrawberryShake.IOperationExecutor<IGetTeamsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTeamsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTeamsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTeamsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTeamsQueryDocument.Instance.Hash.Value, name: "GetTeams", document: GetTeamsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTeams GraphQL operation
    /// <code>
    /// query GetTeams {
    ///   teams {
    ///     __typename
    ///     id
    ///     name
    ///     owners {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///     users {
    ///       __typename
    ///       id
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetTeamsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTeamsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTeamsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersQueryDocument()
        {
        }

        public static GetUsersQueryDocument Instance { get; } = new GetUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a60803e7dc6419a94e4a127ef42c834c");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersQuery : global::OpenMonday.Core.strawberryShake.IGetUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersResult> _operationExecutor;
        public GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersQueryDocument.Instance.Hash.Value, name: "GetUsers", document: GetUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IGetUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateBoardAttribute GraphQL operation
    /// <code>
    /// mutation UpdateBoardAttribute($ids: ID!, $board_attribute: BoardAttributes!, $new_value: String!) {
    ///   update_board(board_id: $ids, board_attribute: $board_attribute, new_value: $new_value)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateBoardAttributeMutationDocument()
        {
        }

        public static UpdateBoardAttributeMutationDocument Instance { get; } = new UpdateBoardAttributeMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x42,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x41,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x28,
            0x24,
            0x69,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x3a,
            0x20,
            0x42,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x41,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6e,
            0x65,
            0x77,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x5f,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x28,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x73,
            0x2c,
            0x20,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x61,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x2c,
            0x20,
            0x6e,
            0x65,
            0x77,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x6e,
            0x65,
            0x77,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a273aca40ed212a4345cc8d88e38999e");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateBoardAttribute GraphQL operation
    /// <code>
    /// mutation UpdateBoardAttribute($ids: ID!, $board_attribute: BoardAttributes!, $new_value: String!) {
    ///   update_board(board_id: $ids, board_attribute: $board_attribute, new_value: $new_value)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeMutation : global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateBoardAttributeResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _boardAttributesFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public UpdateBoardAttributeMutation(global::StrawberryShake.IOperationExecutor<IUpdateBoardAttributeResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _boardAttributesFormatter = serializerResolver.GetInputValueFormatter("BoardAttributes");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateBoardAttributeResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateBoardAttributeResult>> ExecuteAsync(global::System.String ids, global::OpenMonday.Core.strawberryShake.BoardAttributes board_Attribute, global::System.String new_Value, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(ids, board_Attribute, new_Value);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateBoardAttributeResult>> Watch(global::System.String ids, global::OpenMonday.Core.strawberryShake.BoardAttributes board_Attribute, global::System.String new_Value, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(ids, board_Attribute, new_Value);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String ids, global::OpenMonday.Core.strawberryShake.BoardAttributes board_Attribute, global::System.String new_Value)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("ids", FormatIds(ids));
            variables.Add("board_attribute", FormatBoard_attribute(board_Attribute));
            variables.Add("new_value", FormatNew_value(new_Value));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateBoardAttributeMutationDocument.Instance.Hash.Value, name: "UpdateBoardAttribute", document: UpdateBoardAttributeMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatIds(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatBoard_attribute(global::OpenMonday.Core.strawberryShake.BoardAttributes value)
        {
            return _boardAttributesFormatter.Format(value);
        }

        private global::System.Object? FormatNew_value(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateBoardAttribute GraphQL operation
    /// <code>
    /// mutation UpdateBoardAttribute($ids: ID!, $board_attribute: BoardAttributes!, $new_value: String!) {
    ///   update_board(board_id: $ids, board_attribute: $board_attribute, new_value: $new_value)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateBoardAttributeMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateBoardAttributeResult>> ExecuteAsync(global::System.String ids, global::OpenMonday.Core.strawberryShake.BoardAttributes board_Attribute, global::System.String new_Value, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateBoardAttributeResult>> Watch(global::System.String ids, global::OpenMonday.Core.strawberryShake.BoardAttributes board_Attribute, global::System.String new_Value, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateChangeSimpleColumnValue GraphQL operation
    /// <code>
    /// mutation UpdateChangeSimpleColumnValue($board_id: ID!, $item_id: ID, $column_id: String!, $value: String) {
    ///   change_simple_column_value(board_id: $board_id, item_id: $item_id, column_id: $column_id, value: $value) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateChangeSimpleColumnValueMutationDocument()
        {
        }

        public static UpdateChangeSimpleColumnValueMutationDocument Instance { get; } = new UpdateChangeSimpleColumnValueMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x43,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x53,
            0x69,
            0x6d,
            0x70,
            0x6c,
            0x65,
            0x43,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x28,
            0x24,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x44,
            0x2c,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x5f,
            0x73,
            0x69,
            0x6d,
            0x70,
            0x6c,
            0x65,
            0x5f,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x28,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x62,
            0x6f,
            0x61,
            0x72,
            0x64,
            0x5f,
            0x69,
            0x64,
            0x2c,
            0x20,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x74,
            0x65,
            0x6d,
            0x5f,
            0x69,
            0x64,
            0x2c,
            0x20,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x6c,
            0x75,
            0x6d,
            0x6e,
            0x5f,
            0x69,
            0x64,
            0x2c,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d31a7b613cfb272944e706c77258e7b1");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateChangeSimpleColumnValue GraphQL operation
    /// <code>
    /// mutation UpdateChangeSimpleColumnValue($board_id: ID!, $item_id: ID, $column_id: String!, $value: String) {
    ///   change_simple_column_value(board_id: $board_id, item_id: $item_id, column_id: $column_id, value: $value) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueMutation : global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateChangeSimpleColumnValueResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public UpdateChangeSimpleColumnValueMutation(global::StrawberryShake.IOperationExecutor<IUpdateChangeSimpleColumnValueResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateChangeSimpleColumnValueResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateChangeSimpleColumnValueResult>> ExecuteAsync(global::System.String board_Id, global::System.String? item_Id, global::System.String column_Id, global::System.String? @value, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(board_Id, item_Id, column_Id, @value);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateChangeSimpleColumnValueResult>> Watch(global::System.String board_Id, global::System.String? item_Id, global::System.String column_Id, global::System.String? @value, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(board_Id, item_Id, column_Id, @value);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String board_Id, global::System.String? item_Id, global::System.String column_Id, global::System.String? @value)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("board_id", FormatBoard_id(board_Id));
            variables.Add("item_id", FormatItem_id(item_Id));
            variables.Add("column_id", FormatColumn_id(column_Id));
            variables.Add("value", FormatValue(@value));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateChangeSimpleColumnValueMutationDocument.Instance.Hash.Value, name: "UpdateChangeSimpleColumnValue", document: UpdateChangeSimpleColumnValueMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatBoard_id(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatItem_id(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _iDFormatter.Format(value);
            }
        }

        private global::System.Object? FormatColumn_id(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatValue(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateChangeSimpleColumnValue GraphQL operation
    /// <code>
    /// mutation UpdateChangeSimpleColumnValue($board_id: ID!, $item_id: ID, $column_id: String!, $value: String) {
    ///   change_simple_column_value(board_id: $board_id, item_id: $item_id, column_id: $column_id, value: $value) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IUpdateChangeSimpleColumnValueMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateChangeSimpleColumnValueResult>> ExecuteAsync(global::System.String board_Id, global::System.String? item_Id, global::System.String column_Id, global::System.String? @value, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateChangeSimpleColumnValueResult>> Watch(global::System.String board_Id, global::System.String? item_Id, global::System.String column_Id, global::System.String? @value, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MondayClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class MondayClient : global::OpenMonday.Core.strawberryShake.IMondayClient
    {
        private readonly global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery _getActivityLog;
        private readonly global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery _getBoardItemsByCursor;
        private readonly global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery _getBoardItemsByCursor_NextPage;
        private readonly global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery _getBoardsStructureById;
        private readonly global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery _getTeamsByIds;
        private readonly global::OpenMonday.Core.strawberryShake.IGetTeamsQuery _getTeams;
        private readonly global::OpenMonday.Core.strawberryShake.IGetUsersQuery _getUsers;
        private readonly global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation _updateBoardAttribute;
        private readonly global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation _updateChangeSimpleColumnValue;
        public MondayClient(global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery getActivityLog, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery getBoardItemsByCursor, global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery getBoardItemsByCursor_NextPage, global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery getBoardsStructureById, global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery getTeamsByIds, global::OpenMonday.Core.strawberryShake.IGetTeamsQuery getTeams, global::OpenMonday.Core.strawberryShake.IGetUsersQuery getUsers, global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation updateBoardAttribute, global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation updateChangeSimpleColumnValue)
        {
            _getActivityLog = getActivityLog ?? throw new global::System.ArgumentNullException(nameof(getActivityLog));
            _getBoardItemsByCursor = getBoardItemsByCursor ?? throw new global::System.ArgumentNullException(nameof(getBoardItemsByCursor));
            _getBoardItemsByCursor_NextPage = getBoardItemsByCursor_NextPage ?? throw new global::System.ArgumentNullException(nameof(getBoardItemsByCursor_NextPage));
            _getBoardsStructureById = getBoardsStructureById ?? throw new global::System.ArgumentNullException(nameof(getBoardsStructureById));
            _getTeamsByIds = getTeamsByIds ?? throw new global::System.ArgumentNullException(nameof(getTeamsByIds));
            _getTeams = getTeams ?? throw new global::System.ArgumentNullException(nameof(getTeams));
            _getUsers = getUsers ?? throw new global::System.ArgumentNullException(nameof(getUsers));
            _updateBoardAttribute = updateBoardAttribute ?? throw new global::System.ArgumentNullException(nameof(updateBoardAttribute));
            _updateChangeSimpleColumnValue = updateChangeSimpleColumnValue ?? throw new global::System.ArgumentNullException(nameof(updateChangeSimpleColumnValue));
        }

        public static global::System.String ClientName => "MondayClient";
        public global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery GetActivityLog => _getActivityLog;
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery GetBoardItemsByCursor => _getBoardItemsByCursor;
        public global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery GetBoardItemsByCursor_NextPage => _getBoardItemsByCursor_NextPage;
        public global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery GetBoardsStructureById => _getBoardsStructureById;
        public global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery GetTeamsByIds => _getTeamsByIds;
        public global::OpenMonday.Core.strawberryShake.IGetTeamsQuery GetTeams => _getTeams;
        public global::OpenMonday.Core.strawberryShake.IGetUsersQuery GetUsers => _getUsers;
        public global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation UpdateBoardAttribute => _updateBoardAttribute;
        public global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation UpdateChangeSimpleColumnValue => _updateChangeSimpleColumnValue;
    }

    /// <summary>
    /// Represents the MondayClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IMondayClient
    {
        global::OpenMonday.Core.strawberryShake.IGetActivityLogQuery GetActivityLog { get; }

        global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorQuery GetBoardItemsByCursor { get; }

        global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageQuery GetBoardItemsByCursor_NextPage { get; }

        global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdQuery GetBoardsStructureById { get; }

        global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsQuery GetTeamsByIds { get; }

        global::OpenMonday.Core.strawberryShake.IGetTeamsQuery GetTeams { get; }

        global::OpenMonday.Core.strawberryShake.IGetUsersQuery GetUsers { get; }

        global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeMutation UpdateBoardAttribute { get; }

        global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueMutation UpdateChangeSimpleColumnValue { get; }
    }
}

namespace OpenMonday.Core.strawberryShake.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetActivityLogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetActivityLogResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetActivityLogResult);

        public GetActivityLogResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetActivityLogResultInfo info)
            {
                return new GetActivityLogResult(MapIGetActivityLog_BoardsArray(info.Boards, snapshot));
            }

            throw new global::System.ArgumentException("GetActivityLogResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards?>? MapIGetActivityLog_BoardsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.BoardData? child in list)
            {
                boards.Add(MapIGetActivityLog_Boards(child, snapshot));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards? MapIGetActivityLog_Boards(global::OpenMonday.Core.strawberryShake.State.BoardData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetActivityLog_Boards returnValue = default !;
            if (data?.__typename.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetActivityLog_Boards_Board(data.Updated_at, MapIGetActivityLog_Boards_Activity_logsArray(data.Activity_logs, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs?>? MapIGetActivityLog_Boards_Activity_logsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var activityLogTypes = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData? child in list)
            {
                activityLogTypes.Add(MapIGetActivityLog_Boards_Activity_logs(child, snapshot));
            }

            return activityLogTypes;
        }

        private global::OpenMonday.Core.strawberryShake.IGetActivityLog_Boards_Activity_logs? MapIGetActivityLog_Boards_Activity_logs(global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetActivityLog_Boards_Activity_logs returnValue = default !;
            if (data?.__typename.Equals("ActivityLogType", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetActivityLog_Boards_Activity_logs_ActivityLogType(data.Id ?? throw new global::System.ArgumentNullException(), data.User_id ?? throw new global::System.ArgumentNullException(), data.Event ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetActivityLogResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? boards, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Boards = boards;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Boards { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetActivityLogResultInfo(Boards, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursorResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBoardItemsByCursorResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult);

        public GetBoardItemsByCursorResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBoardItemsByCursorResultInfo info)
            {
                return new GetBoardItemsByCursorResult(MapIGetBoardItemsByCursor_BoardsArray(info.Boards, snapshot));
            }

            throw new global::System.ArgumentException("GetBoardItemsByCursorResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards?>? MapIGetBoardItemsByCursor_BoardsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.BoardData? child in list)
            {
                boards.Add(MapIGetBoardItemsByCursor_Boards(child, snapshot));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards? MapIGetBoardItemsByCursor_Boards(global::OpenMonday.Core.strawberryShake.State.BoardData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardItemsByCursor_Boards returnValue = default !;
            if (data?.__typename.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardItemsByCursor_Boards_Board(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page(data.Items_page ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page MapNonNullableIGetBoardItemsByCursor_Boards_Items_page(global::OpenMonday.Core.strawberryShake.State.ItemsResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page returnValue = default !;
            if (data.__typename.Equals("ItemsResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_ItemsResponse(data.Cursor, MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_ItemsNonNullableArray(data.Items ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items> MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var items = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items>();
            foreach (global::OpenMonday.Core.strawberryShake.State.ItemData child in list)
            {
                items.Add(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items(child, snapshot));
            }

            return items;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items(global::OpenMonday.Core.strawberryShake.State.ItemData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page_Items returnValue = default !;
            if (data.__typename.Equals("Item", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_Items_Item(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapIGetBoardItemsByCursor_Boards_Items_page_Items_Group(data.Group, snapshot), MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_valuesNonNullableArray(data.Column_values ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? MapIGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::OpenMonday.Core.strawberryShake.State.GroupData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardItemsByCursor_Boards_Items_page_Items_Group returnValue = default !;
            if (data?.__typename.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_valuesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var columnValues = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values>();
            foreach (global::OpenMonday.Core.strawberryShake.State.IColumnValueData child in list)
            {
                columnValues.Add(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values(child, snapshot));
            }

            return columnValues;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values(global::OpenMonday.Core.strawberryShake.State.IColumnValueData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values? returnValue;
            if (data is global::OpenMonday.Core.strawberryShake.State.BoardRelationValueData boardRelationValue)
            {
                if (!boardRelationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue(boardRelationValue.Id ?? throw new global::System.ArgumentNullException(), boardRelationValue.Value, boardRelationValue.Type!.Value, boardRelationValue.Text, boardRelationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ButtonValueData buttonValue)
            {
                if (!buttonValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue(buttonValue.Id ?? throw new global::System.ArgumentNullException(), buttonValue.Value, buttonValue.Type!.Value, buttonValue.Text, buttonValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CheckboxValueData checkboxValue)
            {
                if (!checkboxValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue(checkboxValue.Id ?? throw new global::System.ArgumentNullException(), checkboxValue.Value, checkboxValue.Type!.Value, checkboxValue.Text, checkboxValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ColorPickerValueData colorPickerValue)
            {
                if (!colorPickerValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue(colorPickerValue.Id ?? throw new global::System.ArgumentNullException(), colorPickerValue.Value, colorPickerValue.Type!.Value, colorPickerValue.Text, colorPickerValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CountryValueData countryValue)
            {
                if (!countryValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue(countryValue.Id ?? throw new global::System.ArgumentNullException(), countryValue.Value, countryValue.Type!.Value, countryValue.Text, countryValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CreationLogValueData creationLogValue)
            {
                if (!creationLogValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue(creationLogValue.Id ?? throw new global::System.ArgumentNullException(), creationLogValue.Value, creationLogValue.Type!.Value, creationLogValue.Text, creationLogValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DateValueData dateValue)
            {
                if (!dateValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue(dateValue.Id ?? throw new global::System.ArgumentNullException(), dateValue.Value, dateValue.Type!.Value, dateValue.Text, dateValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DependencyValueData dependencyValue)
            {
                if (!dependencyValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue(dependencyValue.Id ?? throw new global::System.ArgumentNullException(), dependencyValue.Value, dependencyValue.Type!.Value, dependencyValue.Text, dependencyValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DocValueData docValue)
            {
                if (!docValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue(docValue.Id ?? throw new global::System.ArgumentNullException(), docValue.Value, docValue.Type!.Value, docValue.Text, docValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DropdownValueData dropdownValue)
            {
                if (!dropdownValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue(dropdownValue.Id ?? throw new global::System.ArgumentNullException(), dropdownValue.Value, dropdownValue.Type!.Value, dropdownValue.Text, dropdownValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.EmailValueData emailValue)
            {
                if (!emailValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue(emailValue.Id ?? throw new global::System.ArgumentNullException(), emailValue.Value, emailValue.Type!.Value, emailValue.Text, emailValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.FileValueData fileValue)
            {
                if (!fileValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue(fileValue.Id ?? throw new global::System.ArgumentNullException(), fileValue.Value, fileValue.Type!.Value, fileValue.Text, fileValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.FormulaValueData formulaValue)
            {
                if (!formulaValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue(formulaValue.Id ?? throw new global::System.ArgumentNullException(), formulaValue.Value, formulaValue.Type!.Value, formulaValue.Text, formulaValue.__typename ?? throw new global::System.ArgumentNullException(), formulaValue.Display_value ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.GroupValueData groupValue)
            {
                if (!groupValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue(groupValue.Id ?? throw new global::System.ArgumentNullException(), groupValue.Value, groupValue.Type!.Value, groupValue.Text, groupValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.HourValueData hourValue)
            {
                if (!hourValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue(hourValue.Id ?? throw new global::System.ArgumentNullException(), hourValue.Value, hourValue.Type!.Value, hourValue.Text, hourValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.IntegrationValueData integrationValue)
            {
                if (!integrationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue(integrationValue.Id ?? throw new global::System.ArgumentNullException(), integrationValue.Value, integrationValue.Type!.Value, integrationValue.Text, integrationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ItemIdValueData itemIdValue)
            {
                if (!itemIdValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue(itemIdValue.Id ?? throw new global::System.ArgumentNullException(), itemIdValue.Value, itemIdValue.Type!.Value, itemIdValue.Text, itemIdValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LastUpdatedValueData lastUpdatedValue)
            {
                if (!lastUpdatedValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue(lastUpdatedValue.Id ?? throw new global::System.ArgumentNullException(), lastUpdatedValue.Value, lastUpdatedValue.Type!.Value, lastUpdatedValue.Text, lastUpdatedValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LinkValueData linkValue)
            {
                if (!linkValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue(linkValue.Id ?? throw new global::System.ArgumentNullException(), linkValue.Value, linkValue.Type!.Value, linkValue.Text, linkValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LocationValueData locationValue)
            {
                if (!locationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue(locationValue.Id ?? throw new global::System.ArgumentNullException(), locationValue.Value, locationValue.Type!.Value, locationValue.Text, locationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LongTextValueData longTextValue)
            {
                if (!longTextValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue(longTextValue.Id ?? throw new global::System.ArgumentNullException(), longTextValue.Value, longTextValue.Type!.Value, longTextValue.Text, longTextValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.MirrorValueData mirrorValue)
            {
                if (!mirrorValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue(mirrorValue.Id ?? throw new global::System.ArgumentNullException(), mirrorValue.Value, mirrorValue.Type!.Value, mirrorValue.Text, mirrorValue.__typename ?? throw new global::System.ArgumentNullException(), mirrorValue.Display_value ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.NumbersValueData numbersValue)
            {
                if (!numbersValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue(numbersValue.Id ?? throw new global::System.ArgumentNullException(), numbersValue.Value, numbersValue.Type!.Value, numbersValue.Text, numbersValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PeopleValueData peopleValue)
            {
                if (!peopleValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue(peopleValue.Id ?? throw new global::System.ArgumentNullException(), peopleValue.Value, peopleValue.Type!.Value, peopleValue.Text, peopleValue.__typename ?? throw new global::System.ArgumentNullException(), peopleValue.Updated_at, MapIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(peopleValue.Persons_and_teams, snapshot));
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PersonValueData personValue)
            {
                if (!personValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue(personValue.Id ?? throw new global::System.ArgumentNullException(), personValue.Value, personValue.Type!.Value, personValue.Text, personValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PhoneValueData phoneValue)
            {
                if (!phoneValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue(phoneValue.Id ?? throw new global::System.ArgumentNullException(), phoneValue.Value, phoneValue.Type!.Value, phoneValue.Text, phoneValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ProgressValueData progressValue)
            {
                if (!progressValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue(progressValue.Id ?? throw new global::System.ArgumentNullException(), progressValue.Value, progressValue.Type!.Value, progressValue.Text, progressValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.RatingValueData ratingValue)
            {
                if (!ratingValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue(ratingValue.Id ?? throw new global::System.ArgumentNullException(), ratingValue.Value, ratingValue.Type!.Value, ratingValue.Text, ratingValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.StatusValueData statusValue)
            {
                if (!statusValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue(statusValue.Id ?? throw new global::System.ArgumentNullException(), statusValue.Value, statusValue.Type!.Value, statusValue.Text, statusValue.__typename ?? throw new global::System.ArgumentNullException(), statusValue.Index, statusValue.Is_done, statusValue.Update_id, statusValue.Updated_at);
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.SubtasksValueData subtasksValue)
            {
                if (!subtasksValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue(subtasksValue.Id ?? throw new global::System.ArgumentNullException(), subtasksValue.Value, subtasksValue.Type!.Value, subtasksValue.Text, subtasksValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TagsValueData tagsValue)
            {
                if (!tagsValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue(tagsValue.Id ?? throw new global::System.ArgumentNullException(), tagsValue.Value, tagsValue.Type!.Value, tagsValue.Text, tagsValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TeamValueData teamValue)
            {
                if (!teamValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue(teamValue.Id ?? throw new global::System.ArgumentNullException(), teamValue.Value, teamValue.Type!.Value, teamValue.Text, teamValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TextValueData textValue)
            {
                if (!textValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue(textValue.Id ?? throw new global::System.ArgumentNullException(), textValue.Value, textValue.Type!.Value, textValue.Text, textValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TimelineValueData timelineValue)
            {
                if (!timelineValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue(timelineValue.Id ?? throw new global::System.ArgumentNullException(), timelineValue.Value, timelineValue.Type!.Value, timelineValue.Text, timelineValue.__typename ?? throw new global::System.ArgumentNullException(), timelineValue.From, timelineValue.To, timelineValue.Updated_at, timelineValue.Visualization_type);
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TimeTrackingValueData timeTrackingValue)
            {
                if (!timeTrackingValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue(timeTrackingValue.Id ?? throw new global::System.ArgumentNullException(), timeTrackingValue.Value, timeTrackingValue.Type!.Value, timeTrackingValue.Text, timeTrackingValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.UnsupportedValueData unsupportedValue)
            {
                if (!unsupportedValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue(unsupportedValue.Id ?? throw new global::System.ArgumentNullException(), unsupportedValue.Value, unsupportedValue.Type!.Value, unsupportedValue.Text, unsupportedValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.VoteValueData voteValue)
            {
                if (!voteValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue(voteValue.Id ?? throw new global::System.ArgumentNullException(), voteValue.Value, voteValue.Type!.Value, voteValue.Text, voteValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.WeekValueData weekValue)
            {
                if (!weekValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue(weekValue.Id ?? throw new global::System.ArgumentNullException(), weekValue.Value, weekValue.Type!.Value, weekValue.Text, weekValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.WorldClockValueData worldClockValue)
            {
                if (!worldClockValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue(worldClockValue.Id ?? throw new global::System.ArgumentNullException(), worldClockValue.Value, worldClockValue.Type!.Value, worldClockValue.Text, worldClockValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? MapIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var peopleEntitys = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>();
            foreach (global::OpenMonday.Core.strawberryShake.State.PeopleEntityData child in list)
            {
                peopleEntitys.Add(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(child, snapshot));
            }

            return peopleEntitys;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(global::OpenMonday.Core.strawberryShake.State.PeopleEntityData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams returnValue = default !;
            if (data.__typename.Equals("PeopleEntity", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity(data.Id ?? throw new global::System.ArgumentNullException(), data.Kind);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBoardItemsByCursorResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? boards, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Boards = boards;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Boards { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBoardItemsByCursorResultInfo(Boards, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_NextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBoardItemsByCursor_NextPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult);

        public GetBoardItemsByCursor_NextPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBoardItemsByCursor_NextPageResultInfo info)
            {
                return new GetBoardItemsByCursor_NextPageResult(MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page(info.Next_items_page, snapshot));
            }

            throw new global::System.ArgumentException("GetBoardItemsByCursor_NextPageResultInfo expected.");
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page(global::OpenMonday.Core.strawberryShake.State.ItemsResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_NextPage_Next_items_page returnValue = default !;
            if (data.__typename.Equals("ItemsResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_NextPage_Next_items_page_ItemsResponse(data.Cursor, MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_ItemsNonNullableArray(data.Items ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items> MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var items = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items>();
            foreach (global::OpenMonday.Core.strawberryShake.State.ItemData child in list)
            {
                items.Add(MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_Items(child, snapshot));
            }

            return items;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPage_Next_items_page_Items MapNonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_Items(global::OpenMonday.Core.strawberryShake.State.ItemData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_NextPage_Next_items_page_Items returnValue = default !;
            if (data.__typename.Equals("Item", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_NextPage_Next_items_page_Items_Item(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapIGetBoardItemsByCursor_Boards_Items_page_Items_Group(data.Group, snapshot), MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_valuesNonNullableArray(data.Column_values ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Group? MapIGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::OpenMonday.Core.strawberryShake.State.GroupData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardItemsByCursor_Boards_Items_page_Items_Group returnValue = default !;
            if (data?.__typename.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_Items_Group_Group(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values> MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_valuesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var columnValues = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values>();
            foreach (global::OpenMonday.Core.strawberryShake.State.IColumnValueData child in list)
            {
                columnValues.Add(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values(child, snapshot));
            }

            return columnValues;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values(global::OpenMonday.Core.strawberryShake.State.IColumnValueData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values? returnValue;
            if (data is global::OpenMonday.Core.strawberryShake.State.BoardRelationValueData boardRelationValue)
            {
                if (!boardRelationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_BoardRelationValue(boardRelationValue.Id ?? throw new global::System.ArgumentNullException(), boardRelationValue.Value, boardRelationValue.Type!.Value, boardRelationValue.Text, boardRelationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ButtonValueData buttonValue)
            {
                if (!buttonValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ButtonValue(buttonValue.Id ?? throw new global::System.ArgumentNullException(), buttonValue.Value, buttonValue.Type!.Value, buttonValue.Text, buttonValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CheckboxValueData checkboxValue)
            {
                if (!checkboxValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CheckboxValue(checkboxValue.Id ?? throw new global::System.ArgumentNullException(), checkboxValue.Value, checkboxValue.Type!.Value, checkboxValue.Text, checkboxValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ColorPickerValueData colorPickerValue)
            {
                if (!colorPickerValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ColorPickerValue(colorPickerValue.Id ?? throw new global::System.ArgumentNullException(), colorPickerValue.Value, colorPickerValue.Type!.Value, colorPickerValue.Text, colorPickerValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CountryValueData countryValue)
            {
                if (!countryValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CountryValue(countryValue.Id ?? throw new global::System.ArgumentNullException(), countryValue.Value, countryValue.Type!.Value, countryValue.Text, countryValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.CreationLogValueData creationLogValue)
            {
                if (!creationLogValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_CreationLogValue(creationLogValue.Id ?? throw new global::System.ArgumentNullException(), creationLogValue.Value, creationLogValue.Type!.Value, creationLogValue.Text, creationLogValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DateValueData dateValue)
            {
                if (!dateValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DateValue(dateValue.Id ?? throw new global::System.ArgumentNullException(), dateValue.Value, dateValue.Type!.Value, dateValue.Text, dateValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DependencyValueData dependencyValue)
            {
                if (!dependencyValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DependencyValue(dependencyValue.Id ?? throw new global::System.ArgumentNullException(), dependencyValue.Value, dependencyValue.Type!.Value, dependencyValue.Text, dependencyValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DocValueData docValue)
            {
                if (!docValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DocValue(docValue.Id ?? throw new global::System.ArgumentNullException(), docValue.Value, docValue.Type!.Value, docValue.Text, docValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.DropdownValueData dropdownValue)
            {
                if (!dropdownValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_DropdownValue(dropdownValue.Id ?? throw new global::System.ArgumentNullException(), dropdownValue.Value, dropdownValue.Type!.Value, dropdownValue.Text, dropdownValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.EmailValueData emailValue)
            {
                if (!emailValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_EmailValue(emailValue.Id ?? throw new global::System.ArgumentNullException(), emailValue.Value, emailValue.Type!.Value, emailValue.Text, emailValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.FileValueData fileValue)
            {
                if (!fileValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FileValue(fileValue.Id ?? throw new global::System.ArgumentNullException(), fileValue.Value, fileValue.Type!.Value, fileValue.Text, fileValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.FormulaValueData formulaValue)
            {
                if (!formulaValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_FormulaValue(formulaValue.Id ?? throw new global::System.ArgumentNullException(), formulaValue.Value, formulaValue.Type!.Value, formulaValue.Text, formulaValue.__typename ?? throw new global::System.ArgumentNullException(), formulaValue.Display_value ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.GroupValueData groupValue)
            {
                if (!groupValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_GroupValue(groupValue.Id ?? throw new global::System.ArgumentNullException(), groupValue.Value, groupValue.Type!.Value, groupValue.Text, groupValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.HourValueData hourValue)
            {
                if (!hourValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_HourValue(hourValue.Id ?? throw new global::System.ArgumentNullException(), hourValue.Value, hourValue.Type!.Value, hourValue.Text, hourValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.IntegrationValueData integrationValue)
            {
                if (!integrationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_IntegrationValue(integrationValue.Id ?? throw new global::System.ArgumentNullException(), integrationValue.Value, integrationValue.Type!.Value, integrationValue.Text, integrationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ItemIdValueData itemIdValue)
            {
                if (!itemIdValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ItemIdValue(itemIdValue.Id ?? throw new global::System.ArgumentNullException(), itemIdValue.Value, itemIdValue.Type!.Value, itemIdValue.Text, itemIdValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LastUpdatedValueData lastUpdatedValue)
            {
                if (!lastUpdatedValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LastUpdatedValue(lastUpdatedValue.Id ?? throw new global::System.ArgumentNullException(), lastUpdatedValue.Value, lastUpdatedValue.Type!.Value, lastUpdatedValue.Text, lastUpdatedValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LinkValueData linkValue)
            {
                if (!linkValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LinkValue(linkValue.Id ?? throw new global::System.ArgumentNullException(), linkValue.Value, linkValue.Type!.Value, linkValue.Text, linkValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LocationValueData locationValue)
            {
                if (!locationValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LocationValue(locationValue.Id ?? throw new global::System.ArgumentNullException(), locationValue.Value, locationValue.Type!.Value, locationValue.Text, locationValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.LongTextValueData longTextValue)
            {
                if (!longTextValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_LongTextValue(longTextValue.Id ?? throw new global::System.ArgumentNullException(), longTextValue.Value, longTextValue.Type!.Value, longTextValue.Text, longTextValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.MirrorValueData mirrorValue)
            {
                if (!mirrorValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_MirrorValue(mirrorValue.Id ?? throw new global::System.ArgumentNullException(), mirrorValue.Value, mirrorValue.Type!.Value, mirrorValue.Text, mirrorValue.__typename ?? throw new global::System.ArgumentNullException(), mirrorValue.Display_value ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.NumbersValueData numbersValue)
            {
                if (!numbersValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_NumbersValue(numbersValue.Id ?? throw new global::System.ArgumentNullException(), numbersValue.Value, numbersValue.Type!.Value, numbersValue.Text, numbersValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PeopleValueData peopleValue)
            {
                if (!peopleValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PeopleValue(peopleValue.Id ?? throw new global::System.ArgumentNullException(), peopleValue.Value, peopleValue.Type!.Value, peopleValue.Text, peopleValue.__typename ?? throw new global::System.ArgumentNullException(), peopleValue.Updated_at, MapIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(peopleValue.Persons_and_teams, snapshot));
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PersonValueData personValue)
            {
                if (!personValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PersonValue(personValue.Id ?? throw new global::System.ArgumentNullException(), personValue.Value, personValue.Type!.Value, personValue.Text, personValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.PhoneValueData phoneValue)
            {
                if (!phoneValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_PhoneValue(phoneValue.Id ?? throw new global::System.ArgumentNullException(), phoneValue.Value, phoneValue.Type!.Value, phoneValue.Text, phoneValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.ProgressValueData progressValue)
            {
                if (!progressValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_ProgressValue(progressValue.Id ?? throw new global::System.ArgumentNullException(), progressValue.Value, progressValue.Type!.Value, progressValue.Text, progressValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.RatingValueData ratingValue)
            {
                if (!ratingValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_RatingValue(ratingValue.Id ?? throw new global::System.ArgumentNullException(), ratingValue.Value, ratingValue.Type!.Value, ratingValue.Text, ratingValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.StatusValueData statusValue)
            {
                if (!statusValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_StatusValue(statusValue.Id ?? throw new global::System.ArgumentNullException(), statusValue.Value, statusValue.Type!.Value, statusValue.Text, statusValue.__typename ?? throw new global::System.ArgumentNullException(), statusValue.Index, statusValue.Is_done, statusValue.Update_id, statusValue.Updated_at);
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.SubtasksValueData subtasksValue)
            {
                if (!subtasksValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_SubtasksValue(subtasksValue.Id ?? throw new global::System.ArgumentNullException(), subtasksValue.Value, subtasksValue.Type!.Value, subtasksValue.Text, subtasksValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TagsValueData tagsValue)
            {
                if (!tagsValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TagsValue(tagsValue.Id ?? throw new global::System.ArgumentNullException(), tagsValue.Value, tagsValue.Type!.Value, tagsValue.Text, tagsValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TeamValueData teamValue)
            {
                if (!teamValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TeamValue(teamValue.Id ?? throw new global::System.ArgumentNullException(), teamValue.Value, teamValue.Type!.Value, teamValue.Text, teamValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TextValueData textValue)
            {
                if (!textValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TextValue(textValue.Id ?? throw new global::System.ArgumentNullException(), textValue.Value, textValue.Type!.Value, textValue.Text, textValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TimelineValueData timelineValue)
            {
                if (!timelineValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimelineValue(timelineValue.Id ?? throw new global::System.ArgumentNullException(), timelineValue.Value, timelineValue.Type!.Value, timelineValue.Text, timelineValue.__typename ?? throw new global::System.ArgumentNullException(), timelineValue.From, timelineValue.To, timelineValue.Updated_at, timelineValue.Visualization_type);
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.TimeTrackingValueData timeTrackingValue)
            {
                if (!timeTrackingValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_TimeTrackingValue(timeTrackingValue.Id ?? throw new global::System.ArgumentNullException(), timeTrackingValue.Value, timeTrackingValue.Type!.Value, timeTrackingValue.Text, timeTrackingValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.UnsupportedValueData unsupportedValue)
            {
                if (!unsupportedValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_UnsupportedValue(unsupportedValue.Id ?? throw new global::System.ArgumentNullException(), unsupportedValue.Value, unsupportedValue.Type!.Value, unsupportedValue.Text, unsupportedValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.VoteValueData voteValue)
            {
                if (!voteValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_VoteValue(voteValue.Id ?? throw new global::System.ArgumentNullException(), voteValue.Value, voteValue.Type!.Value, voteValue.Text, voteValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.WeekValueData weekValue)
            {
                if (!weekValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WeekValue(weekValue.Id ?? throw new global::System.ArgumentNullException(), weekValue.Value, weekValue.Type!.Value, weekValue.Text, weekValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::OpenMonday.Core.strawberryShake.State.WorldClockValueData worldClockValue)
            {
                if (!worldClockValue.Type.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::OpenMonday.Core.strawberryShake.GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_WorldClockValue(worldClockValue.Id ?? throw new global::System.ArgumentNullException(), worldClockValue.Value, worldClockValue.Type!.Value, worldClockValue.Text, worldClockValue.__typename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>? MapIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var peopleEntitys = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams>();
            foreach (global::OpenMonday.Core.strawberryShake.State.PeopleEntityData child in list)
            {
                peopleEntitys.Add(MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(child, snapshot));
            }

            return peopleEntitys;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams MapNonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(global::OpenMonday.Core.strawberryShake.State.PeopleEntityData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams returnValue = default !;
            if (data.__typename.Equals("PeopleEntity", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams_PeopleEntity(data.Id ?? throw new global::System.ArgumentNullException(), data.Kind);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBoardItemsByCursor_NextPageResultInfo(global::OpenMonday.Core.strawberryShake.State.ItemsResponseData next_Items_Page, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Next_items_page = next_Items_Page;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get next pages of board's items (rows) by cursor.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.State.ItemsResponseData Next_items_page { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBoardItemsByCursor_NextPageResultInfo(Next_items_page, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetBoardsStructureByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBoardsStructureByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult);

        public GetBoardsStructureByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBoardsStructureByIdResultInfo info)
            {
                return new GetBoardsStructureByIdResult(MapIGetBoardsStructureById_BoardsArray(info.Boards, snapshot));
            }

            throw new global::System.ArgumentException("GetBoardsStructureByIdResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards?>? MapIGetBoardsStructureById_BoardsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.BoardData? child in list)
            {
                boards.Add(MapIGetBoardsStructureById_Boards(child, snapshot));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards? MapIGetBoardsStructureById_Boards(global::OpenMonday.Core.strawberryShake.State.BoardData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardsStructureById_Boards returnValue = default !;
            if (data?.__typename.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardsStructureById_Boards_Board(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Updated_at, data.Items_count, MapIGetBoardsStructureById_Boards_ColumnsArray(data.Columns, snapshot), MapIGetBoardsStructureById_Boards_GroupsArray(data.Groups, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns?>? MapIGetBoardsStructureById_Boards_ColumnsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ColumnData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var columns = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.ColumnData? child in list)
            {
                columns.Add(MapIGetBoardsStructureById_Boards_Columns(child, snapshot));
            }

            return columns;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Columns? MapIGetBoardsStructureById_Boards_Columns(global::OpenMonday.Core.strawberryShake.State.ColumnData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardsStructureById_Boards_Columns returnValue = default !;
            if (data?.__typename.Equals("Column", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardsStructureById_Boards_Columns_Column(data.Id ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.Type ?? throw new global::System.ArgumentNullException(), data.Settings_str ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups?>? MapIGetBoardsStructureById_Boards_GroupsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.GroupData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var @groups = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.GroupData? child in list)
            {
                @groups.Add(MapIGetBoardsStructureById_Boards_Groups(child, snapshot));
            }

            return @groups;
        }

        private global::OpenMonday.Core.strawberryShake.IGetBoardsStructureById_Boards_Groups? MapIGetBoardsStructureById_Boards_Groups(global::OpenMonday.Core.strawberryShake.State.GroupData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBoardsStructureById_Boards_Groups returnValue = default !;
            if (data?.__typename.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBoardsStructureById_Boards_Groups_Group(data.Title ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBoardsStructureByIdResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? boards, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Boards = boards;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of boards.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Boards { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBoardsStructureByIdResultInfo(Boards, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetTeamsByIdsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTeamsByIdsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult);

        public GetTeamsByIdsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTeamsByIdsResultInfo info)
            {
                return new GetTeamsByIdsResult(MapIGetTeamsByIds_TeamsArray(info.Teams, snapshot));
            }

            throw new global::System.ArgumentException("GetTeamsByIdsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams?>? MapIGetTeamsByIds_TeamsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var teams = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.TeamData? child in list)
            {
                teams.Add(MapIGetTeamsByIds_Teams(child, snapshot));
            }

            return teams;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams? MapIGetTeamsByIds_Teams(global::OpenMonday.Core.strawberryShake.State.TeamData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTeamsByIds_Teams returnValue = default !;
            if (data?.__typename.Equals("Team", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTeamsByIds_Teams_Team(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetTeamsByIds_Teams_OwnersNonNullableArray(data.Owners ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetTeamsByIds_Teams_UsersArray(data.Users, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners> MapNonNullableIGetTeamsByIds_Teams_OwnersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners>();
            foreach (global::OpenMonday.Core.strawberryShake.State.UserData child in list)
            {
                users.Add(MapNonNullableIGetTeamsByIds_Teams_Owners(child, snapshot));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Owners MapNonNullableIGetTeamsByIds_Teams_Owners(global::OpenMonday.Core.strawberryShake.State.UserData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetTeamsByIds_Teams_Owners returnValue = default !;
            if (data.__typename.Equals("User", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetTeamsByIds_Teams_Owners_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users?>? MapIGetTeamsByIds_Teams_UsersArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.UserData? child in list)
            {
                users.Add(MapIGetTeamsByIds_Teams_Users(child, snapshot));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeamsByIds_Teams_Users? MapIGetTeamsByIds_Teams_Users(global::OpenMonday.Core.strawberryShake.State.UserData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTeamsByIds_Teams_Users returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTeamsByIds_Teams_Users_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTeamsByIdsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? teams, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Teams = teams;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? Teams { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTeamsByIdsResultInfo(Teams, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetTeamsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTeamsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetTeamsResult);

        public GetTeamsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTeamsResultInfo info)
            {
                return new GetTeamsResult(MapIGetTeams_TeamsArray(info.Teams, snapshot));
            }

            throw new global::System.ArgumentException("GetTeamsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams?>? MapIGetTeams_TeamsArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var teams = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.TeamData? child in list)
            {
                teams.Add(MapIGetTeams_Teams(child, snapshot));
            }

            return teams;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeams_Teams? MapIGetTeams_Teams(global::OpenMonday.Core.strawberryShake.State.TeamData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTeams_Teams returnValue = default !;
            if (data?.__typename.Equals("Team", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTeams_Teams_Team(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetTeams_Teams_OwnersNonNullableArray(data.Owners ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetTeams_Teams_UsersArray(data.Users, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners> MapNonNullableIGetTeams_Teams_OwnersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners>();
            foreach (global::OpenMonday.Core.strawberryShake.State.UserData child in list)
            {
                users.Add(MapNonNullableIGetTeams_Teams_Owners(child, snapshot));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Owners MapNonNullableIGetTeams_Teams_Owners(global::OpenMonday.Core.strawberryShake.State.UserData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetTeams_Teams_Owners returnValue = default !;
            if (data.__typename.Equals("User", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetTeams_Teams_Owners_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users?>? MapIGetTeams_Teams_UsersArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.UserData? child in list)
            {
                users.Add(MapIGetTeams_Teams_Users(child, snapshot));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.IGetTeams_Teams_Users? MapIGetTeams_Teams_Users(global::OpenMonday.Core.strawberryShake.State.UserData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTeams_Teams_Users returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTeams_Teams_Users_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTeamsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? teams, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Teams = teams;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of teams.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? Teams { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTeamsResultInfo(Teams, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.GetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsersResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IGetUsersResult);

        public GetUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersResultInfo info)
            {
                return new GetUsersResult(MapIGetUsers_UsersArray(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.IGetUsers_Users?>? MapIGetUsers_UsersArray(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.IGetUsers_Users?>();
            foreach (global::OpenMonday.Core.strawberryShake.State.UserData? child in list)
            {
                users.Add(MapIGetUsers_Users(child, snapshot));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.IGetUsers_Users? MapIGetUsers_Users(global::OpenMonday.Core.strawberryShake.State.UserData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUsers_Users returnValue = default !;
            if (data?.__typename.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUsers_Users_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a collection of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? Users { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.UpdateBoardAttributeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateBoardAttributeResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult);

        public UpdateBoardAttributeResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateBoardAttributeResultInfo info)
            {
                return new UpdateBoardAttributeResult(info.Update_board);
            }

            throw new global::System.ArgumentException("UpdateBoardAttributeResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateBoardAttributeResultInfo(global::System.Text.Json.JsonElement? update_Board, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Update_board = update_Board;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Update Board attribute.
        /// </summary>
        public global::System.Text.Json.JsonElement? Update_board { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateBoardAttributeResultInfo(Update_board, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.UpdateChangeSimpleColumnValueResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateChangeSimpleColumnValueResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult);

        public UpdateChangeSimpleColumnValueResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateChangeSimpleColumnValueResultInfo info)
            {
                return new UpdateChangeSimpleColumnValueResult(MapIUpdateChangeSimpleColumnValue_Change_simple_column_value(info.Change_simple_column_value, snapshot));
            }

            throw new global::System.ArgumentException("UpdateChangeSimpleColumnValueResultInfo expected.");
        }

        private global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValue_Change_simple_column_value? MapIUpdateChangeSimpleColumnValue_Change_simple_column_value(global::OpenMonday.Core.strawberryShake.State.ItemData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdateChangeSimpleColumnValue_Change_simple_column_value returnValue = default !;
            if (data?.__typename.Equals("Item", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdateChangeSimpleColumnValue_Change_simple_column_value_Item(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateChangeSimpleColumnValueResultInfo(global::OpenMonday.Core.strawberryShake.State.ItemData? change_Simple_Column_Value, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Change_simple_column_value = change_Simple_Column_Value;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Change an item's column with simple value.
        /// </summary>
        public global::OpenMonday.Core.strawberryShake.State.ItemData? Change_simple_column_value { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateChangeSimpleColumnValueResultInfo(Change_simple_column_value, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetActivityLogBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iSO8601DateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetActivityLogBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _iSO8601DateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ISO8601DateTime") ?? throw new global::System.ArgumentException("No serializer for type `ISO8601DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetActivityLogResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetActivityLogResultInfo(Deserialize_IGetActivityLog_BoardsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boards")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Deserialize_IGetActivityLog_BoardsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.BoardData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                boards.Add(Deserialize_IGetActivityLog_Boards(child));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.State.BoardData? Deserialize_IGetActivityLog_Boards(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.BoardData(typename, updated_At: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), activity_Logs: Deserialize_IGetActivityLog_Boards_Activity_logsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity_logs")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _iSO8601DateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData?>? Deserialize_IGetActivityLog_Boards_Activity_logsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var activityLogTypes = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                activityLogTypes.Add(Deserialize_IGetActivityLog_Boards_Activity_logs(child));
            }

            return activityLogTypes;
        }

        private global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData? Deserialize_IGetActivityLog_Boards_Activity_logs(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActivityLogType", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), user_Id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user_id")), @event: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "event")), created_At: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursorBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType> _columnTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.Kind> _kindParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement> _jSONParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetBoardItemsByCursorBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _columnTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType>("ColumnType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnType` found.");
            _kindParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.Kind>("Kind") ?? throw new global::System.ArgumentException("No serializer for type `Kind` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursorResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetBoardItemsByCursorResultInfo(Deserialize_IGetBoardItemsByCursor_BoardsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boards")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Deserialize_IGetBoardItemsByCursor_BoardsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.BoardData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                boards.Add(Deserialize_IGetBoardItemsByCursor_Boards(child));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.State.BoardData? Deserialize_IGetBoardItemsByCursor_Boards(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.BoardData(typename, items_Page: Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items_page")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::OpenMonday.Core.strawberryShake.State.ItemsResponseData Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ItemsResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemsResponseData(typename, cursor: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cursor")), items: Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData> Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var items = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.ItemData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                items.Add(Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items(child));
            }

            return items;
        }

        private global::OpenMonday.Core.strawberryShake.State.ItemData Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Item", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), @group: Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "group")), column_Values: Deserialize_NonNullableIColumnValueDataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "column_values")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::OpenMonday.Core.strawberryShake.State.GroupData? Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.GroupData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData> Deserialize_NonNullableIColumnValueDataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var columnValues = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                columnValues.Add(Deserialize_NonNullableIColumnValueData(child));
            }

            return columnValues;
        }

        private global::OpenMonday.Core.strawberryShake.State.IColumnValueData Deserialize_NonNullableIColumnValueData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("BoardRelationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.BoardRelationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ButtonValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ButtonValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CheckboxValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CheckboxValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ColorPickerValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ColorPickerValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CountryValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CountryValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CreationLogValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CreationLogValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DateValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DateValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DependencyValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DependencyValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DocValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DocValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DropdownValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DropdownValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("EmailValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.EmailValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("FileValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.FileValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("FormulaValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.FormulaValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), display_Value: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "display_value")));
            }

            if (typename?.Equals("GroupValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.GroupValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("HourValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.HourValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("IntegrationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.IntegrationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ItemIdValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemIdValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LastUpdatedValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LastUpdatedValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LinkValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LinkValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LocationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LocationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LongTextValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LongTextValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("MirrorValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.MirrorValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), display_Value: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "display_value")));
            }

            if (typename?.Equals("NumbersValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.NumbersValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("PeopleValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PeopleValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), persons_And_Teams: Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "persons_and_teams")));
            }

            if (typename?.Equals("PersonValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PersonValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("PhoneValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PhoneValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ProgressValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ProgressValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("RatingValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.RatingValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("StatusValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.StatusValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), index: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "index")), is_Done: Deserialize_Boolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "is_done")), update_Id: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "update_id")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")));
            }

            if (typename?.Equals("SubtasksValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.SubtasksValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TagsValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TagsValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TeamValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TeamValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TextValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TextValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TimelineValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TimelineValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), @from: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "from")), to: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "to")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), visualization_Type: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "visualization_type")));
            }

            if (typename?.Equals("TimeTrackingValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TimeTrackingValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("UnsupportedValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UnsupportedValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("VoteValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.VoteValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("WeekValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.WeekValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("WorldClockValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.WorldClockValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Text.Json.JsonElement? Deserialize_JsonElement(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value!);
        }

        private global::OpenMonday.Core.strawberryShake.ColumnType Deserialize_NonNullableColumnType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _columnTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTime? Deserialize_DateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var peopleEntitys = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                peopleEntitys.Add(Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(child));
            }

            return peopleEntitys;
        }

        private global::OpenMonday.Core.strawberryShake.State.PeopleEntityData Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PeopleEntity", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PeopleEntityData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), kind: Deserialize_Kind(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "kind")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::OpenMonday.Core.strawberryShake.Kind? Deserialize_Kind(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _kindParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean? Deserialize_Boolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardItemsByCursor_NextPageBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType> _columnTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.Kind> _kindParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement> _jSONParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetBoardItemsByCursor_NextPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _columnTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType>("ColumnType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnType` found.");
            _kindParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.Kind>("Kind") ?? throw new global::System.ArgumentException("No serializer for type `Kind` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardItemsByCursor_NextPageResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetBoardItemsByCursor_NextPageResultInfo(Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "next_items_page")), entityIds, snapshot.Version);
        }

        private global::OpenMonday.Core.strawberryShake.State.ItemsResponseData Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ItemsResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemsResponseData(typename, cursor: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cursor")), items: Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData> Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var items = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.ItemData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                items.Add(Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_Items(child));
            }

            return items;
        }

        private global::OpenMonday.Core.strawberryShake.State.ItemData Deserialize_NonNullableIGetBoardItemsByCursor_NextPage_Next_items_page_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Item", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), @group: Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "group")), column_Values: Deserialize_NonNullableIColumnValueDataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "column_values")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::OpenMonday.Core.strawberryShake.State.GroupData? Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Group(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.GroupData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData> Deserialize_NonNullableIColumnValueDataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var columnValues = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                columnValues.Add(Deserialize_NonNullableIColumnValueData(child));
            }

            return columnValues;
        }

        private global::OpenMonday.Core.strawberryShake.State.IColumnValueData Deserialize_NonNullableIColumnValueData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("BoardRelationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.BoardRelationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ButtonValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ButtonValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CheckboxValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CheckboxValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ColorPickerValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ColorPickerValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CountryValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CountryValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("CreationLogValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.CreationLogValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DateValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DateValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DependencyValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DependencyValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DocValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DocValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("DropdownValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.DropdownValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("EmailValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.EmailValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("FileValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.FileValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("FormulaValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.FormulaValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), display_Value: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "display_value")));
            }

            if (typename?.Equals("GroupValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.GroupValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("HourValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.HourValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("IntegrationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.IntegrationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ItemIdValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemIdValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LastUpdatedValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LastUpdatedValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LinkValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LinkValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LocationValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LocationValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("LongTextValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.LongTextValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("MirrorValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.MirrorValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), display_Value: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "display_value")));
            }

            if (typename?.Equals("NumbersValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.NumbersValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("PeopleValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PeopleValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), persons_And_Teams: Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "persons_and_teams")));
            }

            if (typename?.Equals("PersonValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PersonValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("PhoneValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PhoneValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("ProgressValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ProgressValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("RatingValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.RatingValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("StatusValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.StatusValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), index: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "index")), is_Done: Deserialize_Boolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "is_done")), update_Id: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "update_id")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")));
            }

            if (typename?.Equals("SubtasksValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.SubtasksValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TagsValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TagsValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TeamValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TeamValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TextValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TextValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("TimelineValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TimelineValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), @from: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "from")), to: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "to")), updated_At: Deserialize_DateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), visualization_Type: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "visualization_type")));
            }

            if (typename?.Equals("TimeTrackingValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TimeTrackingValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("UnsupportedValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UnsupportedValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("VoteValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.VoteValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("WeekValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.WeekValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            if (typename?.Equals("WorldClockValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.WorldClockValueData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), @value: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), text: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Text.Json.JsonElement? Deserialize_JsonElement(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value!);
        }

        private global::OpenMonday.Core.strawberryShake.ColumnType Deserialize_NonNullableColumnType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _columnTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTime? Deserialize_DateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? Deserialize_IGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teamsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var peopleEntitys = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                peopleEntitys.Add(Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(child));
            }

            return peopleEntitys;
        }

        private global::OpenMonday.Core.strawberryShake.State.PeopleEntityData Deserialize_NonNullableIGetBoardItemsByCursor_Boards_Items_page_Items_Column_values_Persons_and_teams(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PeopleEntity", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.PeopleEntityData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), kind: Deserialize_Kind(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "kind")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::OpenMonday.Core.strawberryShake.Kind? Deserialize_Kind(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _kindParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean? Deserialize_Boolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetBoardsStructureByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType> _columnTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iSO8601DateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetBoardsStructureByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _columnTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.ColumnType>("ColumnType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iSO8601DateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ISO8601DateTime") ?? throw new global::System.ArgumentException("No serializer for type `ISO8601DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetBoardsStructureByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetBoardsStructureByIdResultInfo(Deserialize_IGetBoardsStructureById_BoardsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boards")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.BoardData?>? Deserialize_IGetBoardsStructureById_BoardsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var boards = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.BoardData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                boards.Add(Deserialize_IGetBoardsStructureById_Boards(child));
            }

            return boards;
        }

        private global::OpenMonday.Core.strawberryShake.State.BoardData? Deserialize_IGetBoardsStructureById_Boards(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Board", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.BoardData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), updated_At: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_at")), items_Count: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items_count")), columns: Deserialize_IGetBoardsStructureById_Boards_ColumnsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columns")), groups: Deserialize_IGetBoardsStructureById_Boards_GroupsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "groups")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _iSO8601DateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ColumnData?>? Deserialize_IGetBoardsStructureById_Boards_ColumnsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var columns = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.ColumnData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                columns.Add(Deserialize_IGetBoardsStructureById_Boards_Columns(child));
            }

            return columns;
        }

        private global::OpenMonday.Core.strawberryShake.State.ColumnData? Deserialize_IGetBoardsStructureById_Boards_Columns(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Column", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ColumnData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), type: Deserialize_NonNullableColumnType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), settings_Str: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "settings_str")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::OpenMonday.Core.strawberryShake.ColumnType Deserialize_NonNullableColumnType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _columnTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.GroupData?>? Deserialize_IGetBoardsStructureById_Boards_GroupsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var @groups = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.GroupData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @groups.Add(Deserialize_IGetBoardsStructureById_Boards_Groups(child));
            }

            return @groups;
        }

        private global::OpenMonday.Core.strawberryShake.State.GroupData? Deserialize_IGetBoardsStructureById_Boards_Groups(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Group", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.GroupData(typename, title: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsByIdsBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetTeamsByIdsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsByIdsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetTeamsByIdsResultInfo(Deserialize_IGetTeamsByIds_TeamsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "teams")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? Deserialize_IGetTeamsByIds_TeamsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var teams = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.TeamData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                teams.Add(Deserialize_IGetTeamsByIds_Teams(child));
            }

            return teams;
        }

        private global::OpenMonday.Core.strawberryShake.State.TeamData? Deserialize_IGetTeamsByIds_Teams(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Team", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TeamData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), owners: Deserialize_NonNullableIGetTeamsByIds_Teams_OwnersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owners")), users: Deserialize_IGetTeamsByIds_Teams_UsersArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData> Deserialize_NonNullableIGetTeamsByIds_Teams_OwnersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.UserData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Deserialize_NonNullableIGetTeamsByIds_Teams_Owners(child));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.State.UserData Deserialize_NonNullableIGetTeamsByIds_Teams_Owners(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UserData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? Deserialize_IGetTeamsByIds_Teams_UsersArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.UserData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Deserialize_IGetTeamsByIds_Teams_Users(child));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.State.UserData? Deserialize_IGetTeamsByIds_Teams_Users(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UserData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetTeamsBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetTeamsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetTeamsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetTeamsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetTeamsResultInfo(Deserialize_IGetTeams_TeamsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "teams")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.TeamData?>? Deserialize_IGetTeams_TeamsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var teams = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.TeamData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                teams.Add(Deserialize_IGetTeams_Teams(child));
            }

            return teams;
        }

        private global::OpenMonday.Core.strawberryShake.State.TeamData? Deserialize_IGetTeams_Teams(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Team", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.TeamData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), owners: Deserialize_NonNullableIGetTeams_Teams_OwnersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "owners")), users: Deserialize_IGetTeams_Teams_UsersArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData> Deserialize_NonNullableIGetTeams_Teams_OwnersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.UserData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Deserialize_NonNullableIGetTeams_Teams_Owners(child));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.State.UserData Deserialize_NonNullableIGetTeams_Teams_Owners(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UserData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? Deserialize_IGetTeams_Teams_UsersArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.UserData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Deserialize_IGetTeams_Teams_Users(child));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.State.UserData? Deserialize_IGetTeams_Teams_Users(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UserData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GetUsersBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IGetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IGetUsersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetUsersResultInfo(Deserialize_IGetUsers_UsersArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? Deserialize_IGetUsers_UsersArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::OpenMonday.Core.strawberryShake.State.UserData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Deserialize_IGetUsers_Users(child));
            }

            return users;
        }

        private global::OpenMonday.Core.strawberryShake.State.UserData? Deserialize_IGetUsers_Users(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.UserData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), name: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateBoardAttributeBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.BoardAttributes> _boardAttributesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement> _jSONParser;
        public UpdateBoardAttributeBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _boardAttributesParser = serializerResolver.GetLeafValueParser<global::System.String, global::OpenMonday.Core.strawberryShake.BoardAttributes>("BoardAttributes") ?? throw new global::System.ArgumentException("No serializer for type `BoardAttributes` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateBoardAttributeResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new UpdateBoardAttributeResultInfo(Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "update_board")), entityIds, snapshot.Version);
        }

        private global::System.Text.Json.JsonElement? Deserialize_JsonElement(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UpdateChangeSimpleColumnValueBuilder : global::StrawberryShake.OperationResultBuilder<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateChangeSimpleColumnValueBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::OpenMonday.Core.strawberryShake.IUpdateChangeSimpleColumnValueResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new UpdateChangeSimpleColumnValueResultInfo(Deserialize_IUpdateChangeSimpleColumnValue_Change_simple_column_value(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "change_simple_column_value")), entityIds, snapshot.Version);
        }

        private global::OpenMonday.Core.strawberryShake.State.ItemData? Deserialize_IUpdateChangeSimpleColumnValue_Change_simple_column_value(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Item", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OpenMonday.Core.strawberryShake.State.ItemData(typename, id: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>A monday.com board.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IMirroredValueData
    {
        global::System.String __typename { get; }
    }

    ///<summary>A monday.com board.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class BoardData : IMirroredValueData
    {
        public BoardData(global::System.String __typename, global::System.String? updated_At = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData?>? activity_Logs = default !, global::OpenMonday.Core.strawberryShake.State.ItemsResponseData? items_Page = default !, global::System.String? id = default !, global::System.String? name = default !, global::System.Int32? items_Count = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ColumnData?>? columns = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.GroupData?>? groups = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Updated_at = updated_At;
            Activity_logs = activity_Logs;
            Items_page = items_Page;
            Id = id;
            Name = name;
            Items_count = items_Count;
            Columns = columns;
            Groups = groups;
        }

        public global::System.String __typename { get; }
        ///<summary>The last time the board was updated at.</summary>
        public global::System.String? Updated_at { get; }
        ///<summary>The board log events.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ActivityLogTypeData?>? Activity_logs { get; }
        ///<summary>The board's items (rows).</summary>
        public global::OpenMonday.Core.strawberryShake.State.ItemsResponseData? Items_page { get; }
        ///<summary>The unique identifier of the board.</summary>
        public global::System.String? Id { get; }
        ///<summary>The board's name.</summary>
        public global::System.String? Name { get; }
        ///<summary>The number of items on the board</summary>
        public global::System.Int32? Items_count { get; }
        ///<summary>The board's visible columns.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ColumnData?>? Columns { get; }
        ///<summary>The board's visible groups.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.GroupData?>? Groups { get; }
    }

    ///<summary>An activity log event</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ActivityLogTypeData
    {
        public ActivityLogTypeData(global::System.String __typename, global::System.String? id = default !, global::System.String? user_Id = default !, global::System.String? @event = default !, global::System.String? created_At = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            User_id = user_Id;
            Event = @event;
            Created_at = created_At;
        }

        public global::System.String __typename { get; }
        public global::System.String? Id { get; }
        public global::System.String? User_id { get; }
        public global::System.String? Event { get; }
        public global::System.String? Created_at { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ItemsResponseData
    {
        public ItemsResponseData(global::System.String __typename, global::System.String? cursor = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Cursor = cursor;
            Items = items;
        }

        public global::System.String __typename { get; }
        ///<summary>An opaque cursor that represents the position in the list after the lastreturned item. Use this cursor for pagination to fetch the next set of items.If the cursor is null, there are no more items to fetch.</summary>
        public global::System.String? Cursor { get; }
        ///<summary>The items associated with the cursor.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.ItemData>? Items { get; }
    }

    ///<summary>An item (table row).</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ItemData
    {
        public ItemData(global::System.String __typename, global::System.String? id = default !, global::System.String? name = default !, global::OpenMonday.Core.strawberryShake.State.GroupData? @group = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>? column_Values = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
            Group = @group;
            Column_values = column_Values;
        }

        public global::System.String __typename { get; }
        ///<summary>The item's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The item's name.</summary>
        public global::System.String? Name { get; }
        ///<summary>The group that contains this item.</summary>
        public global::OpenMonday.Core.strawberryShake.State.GroupData? Group { get; }
        ///<summary>The item's column values.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.IColumnValueData>? Column_values { get; }
    }

    ///<summary>A group of items in a board.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GroupData : IMirroredValueData
    {
        public GroupData(global::System.String __typename, global::System.String? id = default !, global::System.String? title = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Title = title;
        }

        public global::System.String __typename { get; }
        ///<summary>The group's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The group's title.</summary>
        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial interface IColumnValueData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class BoardRelationValueData : IMirroredValueData, IColumnValueData
    {
        public BoardRelationValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ButtonValueData : IMirroredValueData, IColumnValueData
    {
        public ButtonValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class CheckboxValueData : IMirroredValueData, IColumnValueData
    {
        public CheckboxValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ColorPickerValueData : IMirroredValueData, IColumnValueData
    {
        public ColorPickerValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class CountryValueData : IMirroredValueData, IColumnValueData
    {
        public CountryValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class CreationLogValueData : IMirroredValueData, IColumnValueData
    {
        public CreationLogValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class DateValueData : IMirroredValueData, IColumnValueData
    {
        public DateValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>The formatted date and time in user time zone.</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class DependencyValueData : IMirroredValueData, IColumnValueData
    {
        public DependencyValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class DocValueData : IMirroredValueData, IColumnValueData
    {
        public DocValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class DropdownValueData : IMirroredValueData, IColumnValueData
    {
        public DropdownValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class EmailValueData : IMirroredValueData, IColumnValueData
    {
        public EmailValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class FileValueData : IMirroredValueData, IColumnValueData
    {
        public FileValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class FormulaValueData : IMirroredValueData, IColumnValueData
    {
        public FormulaValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !, global::System.String? display_Value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            Display_value = display_Value;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
        ///<summary>A string representing all the formula values, separated by commas</summary>
        public global::System.String? Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class GroupValueData : IMirroredValueData, IColumnValueData
    {
        public GroupValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class HourValueData : IMirroredValueData, IColumnValueData
    {
        public HourValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class IntegrationValueData : IMirroredValueData, IColumnValueData
    {
        public IntegrationValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ItemIdValueData : IMirroredValueData, IColumnValueData
    {
        public ItemIdValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class LastUpdatedValueData : IMirroredValueData, IColumnValueData
    {
        public LastUpdatedValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class LinkValueData : IMirroredValueData, IColumnValueData
    {
        public LinkValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class LocationValueData : IMirroredValueData, IColumnValueData
    {
        public LocationValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class LongTextValueData : IMirroredValueData, IColumnValueData
    {
        public LongTextValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class MirrorValueData : IMirroredValueData, IColumnValueData
    {
        public MirrorValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !, global::System.String? display_Value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            Display_value = display_Value;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
        ///<summary>A string representing all the names of the linked items, separated by commas</summary>
        public global::System.String? Display_value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class NumbersValueData : IMirroredValueData, IColumnValueData
    {
        public NumbersValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class PeopleValueData : IMirroredValueData, IColumnValueData
    {
        public PeopleValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !, global::System.DateTime? updated_At = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? persons_And_Teams = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            Updated_at = updated_At;
            Persons_and_teams = persons_And_Teams;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
        ///<summary>The date when column value was last updated.</summary>
        public global::System.DateTime? Updated_at { get; }
        ///<summary>The people and teams assigned to the item.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.PeopleEntityData>? Persons_and_teams { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class PersonValueData : IMirroredValueData, IColumnValueData
    {
        public PersonValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class PhoneValueData : IMirroredValueData, IColumnValueData
    {
        public PhoneValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ProgressValueData : IMirroredValueData, IColumnValueData
    {
        public ProgressValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class RatingValueData : IMirroredValueData, IColumnValueData
    {
        public RatingValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class StatusValueData : IMirroredValueData, IColumnValueData
    {
        public StatusValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !, global::System.Int32? index = default !, global::System.Boolean? is_Done = default !, global::System.String? update_Id = default !, global::System.DateTime? updated_At = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            Index = index;
            Is_done = is_Done;
            Update_id = update_Id;
            Updated_at = updated_At;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
        ///<summary>The index of the status in the board</summary>
        public global::System.Int32? Index { get; }
        ///<summary>Whether the status is done</summary>
        public global::System.Boolean? Is_done { get; }
        ///<summary>The ID of an update attached to the status</summary>
        public global::System.String? Update_id { get; }
        ///<summary>The date when column value was last updated.</summary>
        public global::System.DateTime? Updated_at { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class SubtasksValueData : IMirroredValueData, IColumnValueData
    {
        public SubtasksValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TagsValueData : IMirroredValueData, IColumnValueData
    {
        public TagsValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TeamValueData : IMirroredValueData, IColumnValueData
    {
        public TeamValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TextValueData : IMirroredValueData, IColumnValueData
    {
        public TextValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>The column's textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TimelineValueData : IMirroredValueData, IColumnValueData
    {
        public TimelineValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !, global::System.DateTime? @from = default !, global::System.DateTime? to = default !, global::System.DateTime? updated_At = default !, global::System.String? visualization_Type = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
            From = @from;
            To = to;
            Updated_at = updated_At;
            Visualization_type = visualization_Type;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>The range of dates representing the timeline (YYYY-MM-DD)</summary>
        public global::System.String? Text { get; }
        ///<summary>The start date of the timeline</summary>
        public global::System.DateTime? From { get; }
        ///<summary>The end date of the timeline</summary>
        public global::System.DateTime? To { get; }
        ///<summary>The date when column value was last updated.</summary>
        public global::System.DateTime? Updated_at { get; }
        ///<summary>The visualization type for the timeline</summary>
        public global::System.String? Visualization_type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TimeTrackingValueData : IMirroredValueData, IColumnValueData
    {
        public TimeTrackingValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UnsupportedValueData : IMirroredValueData, IColumnValueData
    {
        public UnsupportedValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>Text representation of the column value. Note: Not all columns support textual value</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class VoteValueData : IMirroredValueData, IColumnValueData
    {
        public VoteValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class WeekValueData : IMirroredValueData, IColumnValueData
    {
        public WeekValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>The range of dates representing the week (YYYY-MM-DD)</summary>
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class WorldClockValueData : IMirroredValueData, IColumnValueData
    {
        public WorldClockValueData(global::System.String __typename, global::System.String? id = default !, global::System.Text.Json.JsonElement? @value = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? text = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Value = @value;
            Type = type;
            Text = text;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's raw value in JSON format.</summary>
        public global::System.Text.Json.JsonElement? Value { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        public global::System.String? Text { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class PeopleEntityData
    {
        public PeopleEntityData(global::System.String __typename, global::System.String? id = default !, global::OpenMonday.Core.strawberryShake.Kind? kind = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Kind = kind;
        }

        public global::System.String __typename { get; }
        ///<summary>Id of the entity: a person or a team</summary>
        public global::System.String? Id { get; }
        ///<summary>Type of entity</summary>
        public global::OpenMonday.Core.strawberryShake.Kind? Kind { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class ColumnData
    {
        public ColumnData(global::System.String __typename, global::System.String? id = default !, global::System.String? title = default !, global::OpenMonday.Core.strawberryShake.ColumnType? type = default !, global::System.String? settings_Str = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Title = title;
            Type = type;
            Settings_str = settings_Str;
        }

        public global::System.String __typename { get; }
        ///<summary>The column's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The column's title.</summary>
        public global::System.String? Title { get; }
        ///<summary>The column's type.</summary>
        public global::OpenMonday.Core.strawberryShake.ColumnType? Type { get; }
        ///<summary>The column's settings in a string form.</summary>
        public global::System.String? Settings_str { get; }
    }

    ///<summary>A team of users.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class TeamData
    {
        public TeamData(global::System.String __typename, global::System.String? id = default !, global::System.String? name = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData>? owners = default !, global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? users = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
            Owners = owners;
            Users = users;
        }

        public global::System.String __typename { get; }
        ///<summary>The team's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The team's name.</summary>
        public global::System.String? Name { get; }
        ///<summary>The users who are the owners of the team.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData>? Owners { get; }
        ///<summary>The users in the team.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OpenMonday.Core.strawberryShake.State.UserData?>? Users { get; }
    }

    ///<summary>A monday.com user.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class UserData
    {
        public UserData(global::System.String __typename, global::System.String? id = default !, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Name = name;
        }

        public global::System.String __typename { get; }
        ///<summary>The user's unique identifier.</summary>
        public global::System.String? Id { get; }
        ///<summary>The user's name.</summary>
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class MondayClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.0.3.0")]
    public partial class MondayClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MondayClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
